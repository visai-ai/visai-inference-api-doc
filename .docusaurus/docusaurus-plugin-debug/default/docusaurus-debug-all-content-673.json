{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "className": "docs-version-current",
          "path": "/docs",
          "tagsPath": "/docs/tags",
          "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs",
          "editUrlLocalized": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/i18n/en/docusaurus-plugin-content-docs/current",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/Users/benzsupaluk/Vistec/clone/demo/sidebars.js",
          "contentPath": "/Users/benzsupaluk/Vistec/clone/demo/docs",
          "contentPathLocalized": "/Users/benzsupaluk/Vistec/clone/demo/i18n/en/docusaurus-plugin-content-docs/current",
          "docs": [
            {
              "unversionedId": "intro",
              "id": "intro",
              "title": "Tutorial Intro",
              "description": "Let's discover Docusaurus in less than 5 minutes.",
              "source": "@site/docs/intro.md",
              "sourceDirName": ".",
              "slug": "/intro",
              "permalink": "/docs/intro",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/intro.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "next": {
                "title": "Create a Page",
                "permalink": "/docs/tutorial-basics/create-a-page"
              }
            },
            {
              "unversionedId": "tutorial-basics/congratulations",
              "id": "tutorial-basics/congratulations",
              "title": "Congratulations!",
              "description": "You have just learned the basics of Docusaurus and made some changes to the initial template.",
              "source": "@site/docs/tutorial-basics/congratulations.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/congratulations",
              "permalink": "/docs/tutorial-basics/congratulations",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-basics/congratulations.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 6,
              "frontMatter": {
                "sidebar_position": 6
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Deploy your site",
                "permalink": "/docs/tutorial-basics/deploy-your-site"
              },
              "next": {
                "title": "Manage Docs Versions",
                "permalink": "/docs/tutorial-extras/manage-docs-versions"
              }
            },
            {
              "unversionedId": "tutorial-basics/create-a-blog-post",
              "id": "tutorial-basics/create-a-blog-post",
              "title": "Create a Blog Post",
              "description": "Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed...",
              "source": "@site/docs/tutorial-basics/create-a-blog-post.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/create-a-blog-post",
              "permalink": "/docs/tutorial-basics/create-a-blog-post",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-basics/create-a-blog-post.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Create a Document",
                "permalink": "/docs/tutorial-basics/create-a-document"
              },
              "next": {
                "title": "Markdown Features",
                "permalink": "/docs/tutorial-basics/markdown-features"
              }
            },
            {
              "unversionedId": "tutorial-basics/create-a-document",
              "id": "tutorial-basics/create-a-document",
              "title": "Create a Document",
              "description": "Documents are groups of pages connected through:",
              "source": "@site/docs/tutorial-basics/create-a-document.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/create-a-document",
              "permalink": "/docs/tutorial-basics/create-a-document",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-basics/create-a-document.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Create a Page",
                "permalink": "/docs/tutorial-basics/create-a-page"
              },
              "next": {
                "title": "Create a Blog Post",
                "permalink": "/docs/tutorial-basics/create-a-blog-post"
              }
            },
            {
              "unversionedId": "tutorial-basics/create-a-page",
              "id": "tutorial-basics/create-a-page",
              "title": "Create a Page",
              "description": "Add Markdown or React files to src/pages to create a standalone page:",
              "source": "@site/docs/tutorial-basics/create-a-page.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/create-a-page",
              "permalink": "/docs/tutorial-basics/create-a-page",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-basics/create-a-page.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Tutorial Intro",
                "permalink": "/docs/intro"
              },
              "next": {
                "title": "Create a Document",
                "permalink": "/docs/tutorial-basics/create-a-document"
              }
            },
            {
              "unversionedId": "tutorial-basics/deploy-your-site",
              "id": "tutorial-basics/deploy-your-site",
              "title": "Deploy your site",
              "description": "Docusaurus is a static-site-generator (also called Jamstack).",
              "source": "@site/docs/tutorial-basics/deploy-your-site.md",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/deploy-your-site",
              "permalink": "/docs/tutorial-basics/deploy-your-site",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-basics/deploy-your-site.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 5,
              "frontMatter": {
                "sidebar_position": 5
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Markdown Features",
                "permalink": "/docs/tutorial-basics/markdown-features"
              },
              "next": {
                "title": "Congratulations!",
                "permalink": "/docs/tutorial-basics/congratulations"
              }
            },
            {
              "unversionedId": "tutorial-basics/markdown-features",
              "id": "tutorial-basics/markdown-features",
              "title": "Markdown Features",
              "description": "Docusaurus supports Markdown and a few additional features.",
              "source": "@site/docs/tutorial-basics/markdown-features.mdx",
              "sourceDirName": "tutorial-basics",
              "slug": "/tutorial-basics/markdown-features",
              "permalink": "/docs/tutorial-basics/markdown-features",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-basics/markdown-features.mdx",
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Create a Blog Post",
                "permalink": "/docs/tutorial-basics/create-a-blog-post"
              },
              "next": {
                "title": "Deploy your site",
                "permalink": "/docs/tutorial-basics/deploy-your-site"
              }
            },
            {
              "unversionedId": "tutorial-extras/manage-docs-versions",
              "id": "tutorial-extras/manage-docs-versions",
              "title": "Manage Docs Versions",
              "description": "Docusaurus can manage multiple versions of your docs.",
              "source": "@site/docs/tutorial-extras/manage-docs-versions.md",
              "sourceDirName": "tutorial-extras",
              "slug": "/tutorial-extras/manage-docs-versions",
              "permalink": "/docs/tutorial-extras/manage-docs-versions",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-extras/manage-docs-versions.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Congratulations!",
                "permalink": "/docs/tutorial-basics/congratulations"
              },
              "next": {
                "title": "Translate your site",
                "permalink": "/docs/tutorial-extras/translate-your-site"
              }
            },
            {
              "unversionedId": "tutorial-extras/translate-your-site",
              "id": "tutorial-extras/translate-your-site",
              "title": "Translate your site",
              "description": "Let's translate docs/intro.md to French.",
              "source": "@site/docs/tutorial-extras/translate-your-site.md",
              "sourceDirName": "tutorial-extras",
              "slug": "/tutorial-extras/translate-your-site",
              "permalink": "/docs/tutorial-extras/translate-your-site",
              "draft": false,
              "editUrl": "https://github.com/cloud-annotations/docusaurus-openapi/edit/main/demo/docs/tutorial-extras/translate-your-site.md",
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "tutorialSidebar",
              "previous": {
                "title": "Manage Docs Versions",
                "permalink": "/docs/tutorial-extras/manage-docs-versions"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "tutorialSidebar": [
              {
                "type": "doc",
                "id": "intro"
              },
              {
                "type": "category",
                "label": "Tutorial - Basics",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "tutorial-basics/create-a-page"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/create-a-document"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/create-a-blog-post"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/markdown-features"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/deploy-your-site"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-basics/congratulations"
                  }
                ]
              },
              {
                "type": "category",
                "label": "Tutorial - Extras",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "tutorial-extras/manage-docs-versions"
                  },
                  {
                    "type": "doc",
                    "id": "tutorial-extras/translate-your-site"
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        }
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-plugin-openapi": {
    "default": {
      "loadedApi": [
        {
          "type": "info",
          "id": "introduction",
          "unversionedId": "introduction",
          "title": "Introduction",
          "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
          "slug": "/introduction",
          "frontMatter": {},
          "info": {
            "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
            "version": "1.0.0",
            "title": "Swagger Petstore YAML",
            "termsOfService": "http://swagger.io/terms/",
            "contact": {
              "name": "API Support",
              "email": "apiteam@swagger.io",
              "url": "https://github.com/Redocly/redoc"
            },
            "x-logo": {
              "url": "https://redocly.github.io/redoc/petstore-logo.png",
              "altText": "Petstore logo"
            },
            "license": {
              "name": "Apache 2.0",
              "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/introduction",
          "next": {
            "title": "Add a new pet to the store",
            "permalink": "/petstore/add-a-new-pet-to-the-store"
          }
        },
        {
          "type": "api",
          "id": "add-a-new-pet-to-the-store",
          "unversionedId": "add-a-new-pet-to-the-store",
          "title": "Add a new pet to the store",
          "description": "",
          "slug": "/add-a-new-pet-to-the-store",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Add new pet to the store inventory.",
            "operationId": "addPet",
            "responses": {
              "405": {
                "description": "Invalid input"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "x-codeSamples": [
              {
                "lang": "C#",
                "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();\npet.setApiKey(\"your api key\");\npet.petType = PetStore.v1.Pet.TYPE_DOG;\npet.name = \"Rex\";\n// set other fields\nPetStoreResponse response = pet.create();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Successfully created\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
              },
              {
                "lang": "PHP",
                "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->create($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "My Pet",
                    "title": "Pettie",
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "discriminator": {
                      "propertyName": "petType",
                      "mapping": {
                        "cat": "#/components/schemas/Cat",
                        "dog": "#/components/schemas/Dog",
                        "bee": "#/components/schemas/HoneyBee"
                      }
                    },
                    "properties": {
                      "id": {
                        "externalDocs": {
                          "description": "Find more info here",
                          "url": "https://example.com"
                        },
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "category": {
                        "description": "Categories this pet belongs to",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Category ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "description": "Category name",
                            "type": "string",
                            "minLength": 1
                          },
                          "sub": {
                            "description": "Test Sub Category",
                            "type": "object",
                            "properties": {
                              "prop1": {
                                "type": "string",
                                "description": "Dumb Property"
                              }
                            }
                          }
                        },
                        "xml": {
                          "name": "Category"
                        }
                      },
                      "name": {
                        "description": "The name given to a pet",
                        "type": "string",
                        "example": "Guru"
                      },
                      "photoUrls": {
                        "description": "The list of URL to a cute photos featuring pet",
                        "type": "array",
                        "maxItems": 20,
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string",
                          "format": "url"
                        }
                      },
                      "friend": {
                        "$ref": "#/components/schemas/Pet"
                      },
                      "tags": {
                        "description": "Tags attached to the pet",
                        "type": "array",
                        "minItems": 1,
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Tag ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Tag name",
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "Pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      },
                      "petType": {
                        "description": "Type of a pet",
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "hooray"
                      }
                    }
                  }
                }
              },
              "description": "Pet object that needs to be added to the store",
              "required": true
            },
            "method": "post",
            "path": "/pet",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string",
                "sub": {
                  "prop1": "string"
                }
              },
              "name": "Guru",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "available",
              "petType": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Add a new pet to the store",
              "description": {
                "content": "Add new pet to the store inventory.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                    "type": "text/plain"
                  },
                  "key": "Accept-Language",
                  "value": "en-AU"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n        \"<url>\",\n        \"<url>\"\n    ],\n    \"category\": {\n        \"name\": \"<string>\",\n        \"sub\": {\n            \"prop1\": \"<string>\"\n        }\n    },\n    \"friend\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"<string>\"\n        }\n    ],\n    \"status\": \"<string>\",\n    \"petType\": \"<string>\"\n}"
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/add-a-new-pet-to-the-store",
          "previous": {
            "title": "Introduction",
            "permalink": "/petstore/introduction"
          },
          "next": {
            "title": "Update an existing pet",
            "permalink": "/petstore/update-an-existing-pet"
          }
        },
        {
          "type": "api",
          "id": "update-an-existing-pet",
          "unversionedId": "update-an-existing-pet",
          "title": "Update an existing pet",
          "description": "",
          "slug": "/update-an-existing-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "updatePet",
            "responses": {
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              },
              "405": {
                "description": "Validation exception"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "x-codeSamples": [
              {
                "lang": "PHP",
                "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetId(1);\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->update($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "My Pet",
                    "title": "Pettie",
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "discriminator": {
                      "propertyName": "petType",
                      "mapping": {
                        "cat": "#/components/schemas/Cat",
                        "dog": "#/components/schemas/Dog",
                        "bee": "#/components/schemas/HoneyBee"
                      }
                    },
                    "properties": {
                      "id": {
                        "externalDocs": {
                          "description": "Find more info here",
                          "url": "https://example.com"
                        },
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "category": {
                        "description": "Categories this pet belongs to",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Category ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "description": "Category name",
                            "type": "string",
                            "minLength": 1
                          },
                          "sub": {
                            "description": "Test Sub Category",
                            "type": "object",
                            "properties": {
                              "prop1": {
                                "type": "string",
                                "description": "Dumb Property"
                              }
                            }
                          }
                        },
                        "xml": {
                          "name": "Category"
                        }
                      },
                      "name": {
                        "description": "The name given to a pet",
                        "type": "string",
                        "example": "Guru"
                      },
                      "photoUrls": {
                        "description": "The list of URL to a cute photos featuring pet",
                        "type": "array",
                        "maxItems": 20,
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string",
                          "format": "url"
                        }
                      },
                      "friend": {
                        "$ref": "#/components/schemas/Pet"
                      },
                      "tags": {
                        "description": "Tags attached to the pet",
                        "type": "array",
                        "minItems": 1,
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Tag ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Tag name",
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "Pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      },
                      "petType": {
                        "description": "Type of a pet",
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "hooray"
                      }
                    }
                  }
                }
              },
              "description": "Pet object that needs to be added to the store",
              "required": true
            },
            "method": "put",
            "path": "/pet",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string",
                "sub": {
                  "prop1": "string"
                }
              },
              "name": "Guru",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "available",
              "petType": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Update an existing pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                    "type": "text/plain"
                  },
                  "key": "Accept-Language",
                  "value": "en-AU"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n        \"<url>\",\n        \"<url>\"\n    ],\n    \"category\": {\n        \"name\": \"<string>\",\n        \"sub\": {\n            \"prop1\": \"<string>\"\n        }\n    },\n    \"friend\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"<string>\"\n        }\n    ],\n    \"status\": \"<string>\",\n    \"petType\": \"<string>\"\n}"
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/update-an-existing-pet",
          "previous": {
            "title": "Add a new pet to the store",
            "permalink": "/petstore/add-a-new-pet-to-the-store"
          },
          "next": {
            "title": "Find pet by ID",
            "permalink": "/petstore/find-pet-by-id"
          }
        },
        {
          "type": "api",
          "id": "find-pet-by-id",
          "unversionedId": "find-pet-by-id",
          "title": "Find pet by ID",
          "description": "",
          "slug": "/find-pet-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Returns a single pet",
            "operationId": "getPetById",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet to return",
                "required": true,
                "deprecated": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "discriminator": {
                        "propertyName": "petType",
                        "mapping": {
                          "cat": "#/components/schemas/Cat",
                          "dog": "#/components/schemas/Dog",
                          "bee": "#/components/schemas/HoneyBee"
                        }
                      },
                      "properties": {
                        "id": {
                          "externalDocs": {
                            "description": "Find more info here",
                            "url": "https://example.com"
                          },
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "category": {
                          "description": "Categories this pet belongs to",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Category ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Category name",
                              "type": "string",
                              "minLength": 1
                            },
                            "sub": {
                              "description": "Test Sub Category",
                              "type": "object",
                              "properties": {
                                "prop1": {
                                  "type": "string",
                                  "description": "Dumb Property"
                                }
                              }
                            }
                          },
                          "xml": {
                            "name": "Category"
                          }
                        },
                        "name": {
                          "description": "The name given to a pet",
                          "type": "string",
                          "example": "Guru"
                        },
                        "photoUrls": {
                          "description": "The list of URL to a cute photos featuring pet",
                          "type": "array",
                          "maxItems": 20,
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string",
                            "format": "url"
                          }
                        },
                        "friend": {
                          "$ref": "#/components/schemas/Pet"
                        },
                        "tags": {
                          "description": "Tags attached to the pet",
                          "type": "array",
                          "minItems": 1,
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "Pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        },
                        "petType": {
                          "description": "Type of a pet",
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "discriminator": {
                        "propertyName": "petType",
                        "mapping": {
                          "cat": "#/components/schemas/Cat",
                          "dog": "#/components/schemas/Dog",
                          "bee": "#/components/schemas/HoneyBee"
                        }
                      },
                      "properties": {
                        "id": {
                          "externalDocs": {
                            "description": "Find more info here",
                            "url": "https://example.com"
                          },
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "category": {
                          "description": "Categories this pet belongs to",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Category ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Category name",
                              "type": "string",
                              "minLength": 1
                            },
                            "sub": {
                              "description": "Test Sub Category",
                              "type": "object",
                              "properties": {
                                "prop1": {
                                  "type": "string",
                                  "description": "Dumb Property"
                                }
                              }
                            }
                          },
                          "xml": {
                            "name": "Category"
                          }
                        },
                        "name": {
                          "description": "The name given to a pet",
                          "type": "string",
                          "example": "Guru"
                        },
                        "photoUrls": {
                          "description": "The list of URL to a cute photos featuring pet",
                          "type": "array",
                          "maxItems": 20,
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string",
                            "format": "url"
                          }
                        },
                        "friend": {
                          "$ref": "#/components/schemas/Pet"
                        },
                        "tags": {
                          "description": "Tags attached to the pet",
                          "type": "array",
                          "minItems": 1,
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "Pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        },
                        "petType": {
                          "description": "Type of a pet",
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              }
            },
            "security": [
              {
                "api_key": []
              }
            ],
            "method": "get",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Find pet by ID",
              "description": {
                "content": "Returns a single pet",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet to return",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "method": "GET",
              "auth": {
                "type": "apikey",
                "apikey": [
                  {
                    "type": "any",
                    "value": "api_key",
                    "key": "key"
                  },
                  {
                    "type": "any",
                    "value": true,
                    "key": "value"
                  },
                  {
                    "type": "any",
                    "value": "header",
                    "key": "in"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/find-pet-by-id",
          "previous": {
            "title": "Update an existing pet",
            "permalink": "/petstore/update-an-existing-pet"
          },
          "next": {
            "title": "Updates a pet in the store with form data",
            "permalink": "/petstore/updates-a-pet-in-the-store-with-form-data"
          }
        },
        {
          "type": "api",
          "id": "updates-a-pet-in-the-store-with-form-data",
          "unversionedId": "updates-a-pet-in-the-store-with-form-data",
          "title": "Updates a pet in the store with form data",
          "description": "",
          "slug": "/updates-a-pet-in-the-store-with-form-data",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "updatePetWithForm",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet that needs to be updated",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "405": {
                "description": "Invalid input"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "requestBody": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Updated name of the pet",
                        "type": "string"
                      },
                      "status": {
                        "description": "Updated status of the pet",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "method": "post",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Updates a pet in the store with form data",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet that needs to be updated",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "description": {
                      "content": "Updated name of the pet",
                      "type": "text/plain"
                    },
                    "key": "name",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Updated status of the pet",
                      "type": "text/plain"
                    },
                    "key": "status",
                    "value": "<string>"
                  }
                ]
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/updates-a-pet-in-the-store-with-form-data",
          "previous": {
            "title": "Find pet by ID",
            "permalink": "/petstore/find-pet-by-id"
          },
          "next": {
            "title": "Deletes a pet",
            "permalink": "/petstore/deletes-a-pet"
          }
        },
        {
          "type": "api",
          "id": "deletes-a-pet",
          "unversionedId": "deletes-a-pet",
          "title": "Deletes a pet",
          "description": "",
          "slug": "/deletes-a-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "deletePet",
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "required": false,
                "schema": {
                  "type": "string"
                },
                "example": "Bearer <TOKEN>"
              },
              {
                "name": "petId",
                "in": "path",
                "description": "Pet id to delete",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid pet value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "delete",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Deletes a pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) Pet id to delete",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "api_key",
                  "value": "<string>"
                }
              ],
              "method": "DELETE",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/deletes-a-pet",
          "previous": {
            "title": "Updates a pet in the store with form data",
            "permalink": "/petstore/updates-a-pet-in-the-store-with-form-data"
          },
          "next": {
            "title": "uploads an image",
            "permalink": "/petstore/uploads-an-image"
          }
        },
        {
          "type": "api",
          "id": "uploads-an-image",
          "unversionedId": "uploads-an-image",
          "title": "uploads an image",
          "description": "",
          "slug": "/uploads-an-image",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "uploadFile",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet to update",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "requestBody": {
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "method": "post",
            "path": "/pet/{petId}/uploadImage",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "uploads an image",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId",
                  "uploadImage"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet to update",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/octet-stream"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\"<binary>\""
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/uploads-an-image",
          "previous": {
            "title": "Deletes a pet",
            "permalink": "/petstore/deletes-a-pet"
          },
          "next": {
            "title": "Finds Pets by status",
            "permalink": "/petstore/finds-pets-by-status"
          }
        },
        {
          "type": "api",
          "id": "finds-pets-by-status",
          "unversionedId": "finds-pets-by-status",
          "title": "Finds Pets by status",
          "description": "",
          "slug": "/finds-pets-by-status",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Multiple status values can be provided with comma separated strings",
            "operationId": "findPetsByStatus",
            "parameters": [
              {
                "name": "status",
                "in": "query",
                "description": "Status values that need to be considered for filter",
                "required": true,
                "style": "form",
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 3,
                  "items": {
                    "type": "string",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "default": "available"
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid status value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "get",
            "path": "/pet/findByStatus",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Finds Pets by status",
              "description": {
                "content": "Multiple status values can be provided with comma separated strings",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  "findByStatus"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) Status values that need to be considered for filter",
                      "type": "text/plain"
                    },
                    "key": "status",
                    "value": "available"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/finds-pets-by-status",
          "previous": {
            "title": "uploads an image",
            "permalink": "/petstore/uploads-an-image"
          },
          "next": {
            "title": "Finds Pets by tags",
            "permalink": "/petstore/finds-pets-by-tags"
          }
        },
        {
          "type": "api",
          "id": "finds-pets-by-tags",
          "unversionedId": "finds-pets-by-tags",
          "title": "Finds Pets by tags",
          "description": "",
          "slug": "/finds-pets-by-tags",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
            "operationId": "findPetsByTags",
            "deprecated": true,
            "parameters": [
              {
                "name": "tags",
                "in": "query",
                "description": "Tags to filter by",
                "required": true,
                "style": "form",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid tag value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "get",
            "path": "/pet/findByTags",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Finds Pets by tags",
              "description": {
                "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  "findByTags"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) Tags to filter by",
                      "type": "text/plain"
                    },
                    "key": "tags",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "(Required) Tags to filter by",
                      "type": "text/plain"
                    },
                    "key": "tags",
                    "value": "<string>"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/finds-pets-by-tags",
          "previous": {
            "title": "Finds Pets by status",
            "permalink": "/petstore/finds-pets-by-status"
          },
          "next": {
            "title": "Returns pet inventories by status",
            "permalink": "/petstore/returns-pet-inventories-by-status"
          }
        },
        {
          "type": "api",
          "id": "returns-pet-inventories-by-status",
          "unversionedId": "returns-pet-inventories-by-status",
          "title": "Returns pet inventories by status",
          "description": "",
          "slug": "/returns-pet-inventories-by-status",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "Returns a map of status codes to quantities",
            "operationId": "getInventory",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "security": [
              {
                "api_key": []
              }
            ],
            "method": "get",
            "path": "/store/inventory",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Returns pet inventories by status",
              "description": {
                "content": "Returns a map of status codes to quantities",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "inventory"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "apikey",
                "apikey": [
                  {
                    "type": "any",
                    "value": "api_key",
                    "key": "key"
                  },
                  {
                    "type": "any",
                    "value": true,
                    "key": "value"
                  },
                  {
                    "type": "any",
                    "value": "header",
                    "key": "in"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/returns-pet-inventories-by-status",
          "previous": {
            "title": "Finds Pets by tags",
            "permalink": "/petstore/finds-pets-by-tags"
          },
          "next": {
            "title": "Place an order for a pet",
            "permalink": "/petstore/place-an-order-for-a-pet"
          }
        },
        {
          "type": "api",
          "id": "place-an-order-for-a-pet",
          "unversionedId": "place-an-order-for-a-pet",
          "title": "Place an order for a pet",
          "description": "",
          "slug": "/place-an-order-for-a-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "",
            "operationId": "placeOrder",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid Order",
                "content": {
                  "application/json": {
                    "example": {
                      "status": 400,
                      "message": "Invalid Order"
                    }
                  }
                }
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Order ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "petId": {
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "default": 1
                      },
                      "shipDate": {
                        "description": "Estimated ship date",
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "description": "Indicates whenever order was completed or not",
                        "type": "boolean",
                        "default": false,
                        "readOnly": true
                      },
                      "requestId": {
                        "description": "Unique Request Id",
                        "type": "string",
                        "writeOnly": true
                      }
                    },
                    "xml": {
                      "name": "Order"
                    }
                  }
                }
              },
              "description": "order placed for purchasing the pet",
              "required": true
            },
            "method": "post",
            "path": "/store/order",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "petId": 0,
              "quantity": 0,
              "shipDate": "string",
              "status": "placed",
              "complete": false,
              "requestId": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Place an order for a pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"quantity\": 1,\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"requestId\": \"<string>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/place-an-order-for-a-pet",
          "previous": {
            "title": "Returns pet inventories by status",
            "permalink": "/petstore/returns-pet-inventories-by-status"
          },
          "next": {
            "title": "Find purchase order by ID",
            "permalink": "/petstore/find-purchase-order-by-id"
          }
        },
        {
          "type": "api",
          "id": "find-purchase-order-by-id",
          "unversionedId": "find-purchase-order-by-id",
          "title": "Find purchase order by ID",
          "description": "",
          "slug": "/find-purchase-order-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
            "operationId": "getOrderById",
            "parameters": [
              {
                "name": "orderId",
                "in": "path",
                "description": "ID of pet that needs to be fetched",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "maximum": 5
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Order not found"
              }
            },
            "method": "get",
            "path": "/store/order/{orderId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Find purchase order by ID",
              "description": {
                "content": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order",
                  ":orderId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet that needs to be fetched",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "orderId"
                  }
                ]
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/find-purchase-order-by-id",
          "previous": {
            "title": "Place an order for a pet",
            "permalink": "/petstore/place-an-order-for-a-pet"
          },
          "next": {
            "title": "Delete purchase order by ID",
            "permalink": "/petstore/delete-purchase-order-by-id"
          }
        },
        {
          "type": "api",
          "id": "delete-purchase-order-by-id",
          "unversionedId": "delete-purchase-order-by-id",
          "title": "Delete purchase order by ID",
          "description": "",
          "slug": "/delete-purchase-order-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
            "operationId": "deleteOrder",
            "parameters": [
              {
                "name": "orderId",
                "in": "path",
                "description": "ID of the order that needs to be deleted",
                "required": true,
                "schema": {
                  "type": "string",
                  "minimum": 1
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Order not found"
              }
            },
            "method": "delete",
            "path": "/store/order/{orderId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Delete purchase order by ID",
              "description": {
                "content": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order",
                  ":orderId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of the order that needs to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "orderId"
                  }
                ]
              },
              "method": "DELETE"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/delete-purchase-order-by-id",
          "previous": {
            "title": "Find purchase order by ID",
            "permalink": "/petstore/find-purchase-order-by-id"
          },
          "next": {
            "title": "Subscribe to the Store events",
            "permalink": "/petstore/subscribe-to-the-store-events"
          }
        },
        {
          "type": "api",
          "id": "subscribe-to-the-store-events",
          "unversionedId": "subscribe-to-the-store-events",
          "title": "Subscribe to the Store events",
          "description": "",
          "slug": "/subscribe-to-the-store-events",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "Add subscription for a store events",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "callbackUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "This URL will be called by the server when the desired event will occur",
                        "example": "https://myserver.com/send/callback/here"
                      },
                      "eventName": {
                        "type": "string",
                        "description": "Event name for the subscription",
                        "enum": [
                          "orderInProgress",
                          "orderShipped",
                          "orderDelivered"
                        ],
                        "example": "orderInProgress"
                      }
                    },
                    "required": [
                      "callbackUrl",
                      "eventName"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Subscription added",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "subscriptionId": {
                          "type": "string",
                          "example": "AAA-123-BBB-456"
                        }
                      }
                    }
                  }
                }
              }
            },
            "callbacks": {
              "orderInProgress": {
                "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
                  "servers": [
                    {
                      "url": "//callback-url.path-level/v1",
                      "description": "Path level server 1"
                    },
                    {
                      "url": "//callback-url.path-level/v2",
                      "description": "Path level server 2"
                    }
                  ],
                  "post": {
                    "summary": "Order in Progress (Summary)",
                    "description": "A callback triggered every time an Order is updated status to \"inProgress\" (Description)",
                    "externalDocs": {
                      "description": "Find out more",
                      "url": "https://more-details.com/demo"
                    },
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "status": {
                                "type": "string",
                                "example": "inProgress"
                              }
                            }
                          }
                        },
                        "application/xml": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              }
                            }
                          },
                          "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <orderId>123</orderId>\n  <status>inProgress</status>\n  <timestamp>2018-10-19T16:46:45Z</timestamp>\n</root>\n"
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed",
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "someProp": {
                                  "type": "string",
                                  "example": "123"
                                }
                              }
                            }
                          }
                        }
                      },
                      "299": {
                        "description": "Response for cancelling subscription"
                      },
                      "500": {
                        "description": "Callback processing failed and retries will be performed"
                      }
                    },
                    "x-codeSamples": [
                      {
                        "lang": "C#",
                        "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();\npet.setApiKey(\"your api key\");\npet.petType = PetStore.v1.Pet.TYPE_DOG;\npet.name = \"Rex\";\n// set other fields\nPetStoreResponse response = pet.create();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Successfully created\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
                      },
                      {
                        "lang": "PHP",
                        "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->create($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
                      }
                    ]
                  },
                  "put": {
                    "description": "Order in Progress (Only Description)",
                    "servers": [
                      {
                        "url": "//callback-url.operation-level/v1",
                        "description": "Operation level server 1 (Operation override)"
                      },
                      {
                        "url": "//callback-url.operation-level/v2",
                        "description": "Operation level server 2 (Operation override)"
                      }
                    ],
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "status": {
                                "type": "string",
                                "example": "inProgress"
                              }
                            }
                          }
                        },
                        "application/xml": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              }
                            }
                          },
                          "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <orderId>123</orderId>\n  <status>inProgress</status>\n  <timestamp>2018-10-19T16:46:45Z</timestamp>\n</root>\n"
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed",
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "someProp": {
                                  "type": "string",
                                  "example": "123"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "orderShipped": {
                "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
                  "post": {
                    "description": "Very long description\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\nincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\nnostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\nfugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt mollit anim id est laborum.\n",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "estimatedDeliveryDate": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-11-11T16:00:00Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed"
                      }
                    }
                  }
                }
              },
              "orderDelivered": {
                "http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}": {
                  "post": {
                    "deprecated": true,
                    "summary": "Order delivered",
                    "description": "A callback triggered every time an Order is delivered to the recipient",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed"
                      }
                    }
                  }
                }
              }
            },
            "method": "post",
            "path": "/store/subscribe",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "callbackUrl": "https://myserver.com/send/callback/here",
              "eventName": "orderInProgress"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Subscribe to the Store events",
              "description": {
                "content": "Add subscription for a store events",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "subscribe"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"callbackUrl\": \"<uri>\",\n    \"eventName\": \"<string>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/subscribe-to-the-store-events",
          "previous": {
            "title": "Delete purchase order by ID",
            "permalink": "/petstore/delete-purchase-order-by-id"
          },
          "next": {
            "title": "Create user",
            "permalink": "/petstore/create-user"
          }
        },
        {
          "type": "api",
          "id": "create-user",
          "unversionedId": "create-user",
          "title": "Create user",
          "description": "",
          "slug": "/create-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "createUser",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "pet": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "photoUrls"
                            ],
                            "discriminator": {
                              "propertyName": "petType",
                              "mapping": {
                                "cat": "#/components/schemas/Cat",
                                "dog": "#/components/schemas/Dog",
                                "bee": "#/components/schemas/HoneyBee"
                              }
                            },
                            "properties": {
                              "id": {
                                "externalDocs": {
                                  "description": "Find more info here",
                                  "url": "https://example.com"
                                },
                                "description": "Pet ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "category": {
                                "description": "Categories this pet belongs to",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Category ID",
                                    "type": "integer",
                                    "format": "int64",
                                    "readOnly": true
                                  },
                                  "name": {
                                    "description": "Category name",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "sub": {
                                    "description": "Test Sub Category",
                                    "type": "object",
                                    "properties": {
                                      "prop1": {
                                        "type": "string",
                                        "description": "Dumb Property"
                                      }
                                    }
                                  }
                                },
                                "xml": {
                                  "name": "Category"
                                }
                              },
                              "name": {
                                "description": "The name given to a pet",
                                "type": "string",
                                "example": "Guru"
                              },
                              "photoUrls": {
                                "description": "The list of URL to a cute photos featuring pet",
                                "type": "array",
                                "maxItems": 20,
                                "xml": {
                                  "name": "photoUrl",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "string",
                                  "format": "url"
                                }
                              },
                              "friend": {
                                "$ref": "#/components/schemas/Pet"
                              },
                              "tags": {
                                "description": "Tags attached to the pet",
                                "type": "array",
                                "minItems": 1,
                                "xml": {
                                  "name": "tag",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Tag ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Tag name",
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "xml": {
                                    "name": "Tag"
                                  }
                                }
                              },
                              "status": {
                                "type": "string",
                                "description": "Pet status in the store",
                                "enum": [
                                  "available",
                                  "pending",
                                  "sold"
                                ]
                              },
                              "petType": {
                                "description": "Type of a pet",
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Pet"
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        ]
                      },
                      "username": {
                        "description": "User supplied username",
                        "type": "string",
                        "minLength": 4,
                        "example": "John78"
                      },
                      "firstName": {
                        "description": "User first name",
                        "type": "string",
                        "minLength": 1,
                        "example": "John"
                      },
                      "lastName": {
                        "description": "User last name",
                        "type": "string",
                        "minLength": 1,
                        "example": "Smith"
                      },
                      "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "john.smith@example.com"
                      },
                      "password": {
                        "type": "string",
                        "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                        "example": "drowssaP123"
                      },
                      "phone": {
                        "description": "User phone number in international format",
                        "type": "string",
                        "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                        "example": "+1-202-555-0192"
                      },
                      "userStatus": {
                        "description": "User status",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "xml": {
                      "name": "User"
                    }
                  }
                }
              },
              "description": "Created user object",
              "required": true
            },
            "method": "post",
            "path": "/user",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "username": "John78",
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@example.com",
              "password": "drowssaP123",
              "phone": "+1-202-555-0192",
              "userStatus": 0
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Create user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"pet\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<email>\",\n    \"password\": \"<password>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/create-user",
          "previous": {
            "title": "Subscribe to the Store events",
            "permalink": "/petstore/subscribe-to-the-store-events"
          },
          "next": {
            "title": "Get user by user name",
            "permalink": "/petstore/get-user-by-user-name"
          }
        },
        {
          "type": "api",
          "id": "get-user-by-user-name",
          "unversionedId": "get-user-by-user-name",
          "title": "Get user by user name",
          "description": "",
          "slug": "/get-user-by-user-name",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "getUserByName",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "The name that needs to be fetched. Use user1 for testing. ",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid username supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "method": "get",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Get user by user name",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/get-user-by-user-name",
          "previous": {
            "title": "Create user",
            "permalink": "/petstore/create-user"
          },
          "next": {
            "title": "Updated user",
            "permalink": "/petstore/updated-user"
          }
        },
        {
          "type": "api",
          "id": "updated-user",
          "unversionedId": "updated-user",
          "title": "Updated user",
          "description": "",
          "slug": "/updated-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "updateUser",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "name that need to be deleted",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid user supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "pet": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "photoUrls"
                            ],
                            "discriminator": {
                              "propertyName": "petType",
                              "mapping": {
                                "cat": "#/components/schemas/Cat",
                                "dog": "#/components/schemas/Dog",
                                "bee": "#/components/schemas/HoneyBee"
                              }
                            },
                            "properties": {
                              "id": {
                                "externalDocs": {
                                  "description": "Find more info here",
                                  "url": "https://example.com"
                                },
                                "description": "Pet ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "category": {
                                "description": "Categories this pet belongs to",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Category ID",
                                    "type": "integer",
                                    "format": "int64",
                                    "readOnly": true
                                  },
                                  "name": {
                                    "description": "Category name",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "sub": {
                                    "description": "Test Sub Category",
                                    "type": "object",
                                    "properties": {
                                      "prop1": {
                                        "type": "string",
                                        "description": "Dumb Property"
                                      }
                                    }
                                  }
                                },
                                "xml": {
                                  "name": "Category"
                                }
                              },
                              "name": {
                                "description": "The name given to a pet",
                                "type": "string",
                                "example": "Guru"
                              },
                              "photoUrls": {
                                "description": "The list of URL to a cute photos featuring pet",
                                "type": "array",
                                "maxItems": 20,
                                "xml": {
                                  "name": "photoUrl",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "string",
                                  "format": "url"
                                }
                              },
                              "friend": {
                                "$ref": "#/components/schemas/Pet"
                              },
                              "tags": {
                                "description": "Tags attached to the pet",
                                "type": "array",
                                "minItems": 1,
                                "xml": {
                                  "name": "tag",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Tag ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Tag name",
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "xml": {
                                    "name": "Tag"
                                  }
                                }
                              },
                              "status": {
                                "type": "string",
                                "description": "Pet status in the store",
                                "enum": [
                                  "available",
                                  "pending",
                                  "sold"
                                ]
                              },
                              "petType": {
                                "description": "Type of a pet",
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Pet"
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        ]
                      },
                      "username": {
                        "description": "User supplied username",
                        "type": "string",
                        "minLength": 4,
                        "example": "John78"
                      },
                      "firstName": {
                        "description": "User first name",
                        "type": "string",
                        "minLength": 1,
                        "example": "John"
                      },
                      "lastName": {
                        "description": "User last name",
                        "type": "string",
                        "minLength": 1,
                        "example": "Smith"
                      },
                      "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "john.smith@example.com"
                      },
                      "password": {
                        "type": "string",
                        "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                        "example": "drowssaP123"
                      },
                      "phone": {
                        "description": "User phone number in international format",
                        "type": "string",
                        "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                        "example": "+1-202-555-0192"
                      },
                      "userStatus": {
                        "description": "User status",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "xml": {
                      "name": "User"
                    }
                  }
                }
              },
              "description": "Updated user object",
              "required": true
            },
            "method": "put",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "username": "John78",
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@example.com",
              "password": "drowssaP123",
              "phone": "+1-202-555-0192",
              "userStatus": 0
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Updated user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) name that need to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"pet\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<email>\",\n    \"password\": \"<password>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/updated-user",
          "previous": {
            "title": "Get user by user name",
            "permalink": "/petstore/get-user-by-user-name"
          },
          "next": {
            "title": "Delete user",
            "permalink": "/petstore/delete-user"
          }
        },
        {
          "type": "api",
          "id": "delete-user",
          "unversionedId": "delete-user",
          "title": "Delete user",
          "description": "",
          "slug": "/delete-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "deleteUser",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "The name that needs to be deleted",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid username supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "method": "delete",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Delete user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) The name that needs to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "method": "DELETE"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/delete-user",
          "previous": {
            "title": "Updated user",
            "permalink": "/petstore/updated-user"
          },
          "next": {
            "title": "Creates list of users with given input array",
            "permalink": "/petstore/creates-list-of-users-with-given-input-array"
          }
        },
        {
          "type": "api",
          "id": "creates-list-of-users-with-given-input-array",
          "unversionedId": "creates-list-of-users-with-given-input-array",
          "title": "Creates list of users with given input array",
          "description": "",
          "slug": "/creates-list-of-users-with-given-input-array",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "createUsersWithArrayInput",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "description": "List of user object",
              "required": true
            },
            "method": "post",
            "path": "/user/createWithArray",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": [
              {
                "id": 0,
                "username": "John78",
                "firstName": "John",
                "lastName": "Smith",
                "email": "john.smith@example.com",
                "password": "drowssaP123",
                "phone": "+1-202-555-0192",
                "userStatus": 0
              }
            ],
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Creates list of users with given input array",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "createWithArray"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "[\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    },\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    }\n]"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/creates-list-of-users-with-given-input-array",
          "previous": {
            "title": "Delete user",
            "permalink": "/petstore/delete-user"
          },
          "next": {
            "title": "Creates list of users with given input array",
            "permalink": "/petstore/creates-list-of-users-with-given-input-array-1"
          }
        },
        {
          "type": "api",
          "id": "creates-list-of-users-with-given-input-array-1",
          "unversionedId": "creates-list-of-users-with-given-input-array-1",
          "title": "Creates list of users with given input array",
          "description": "",
          "slug": "/creates-list-of-users-with-given-input-array-1",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "createUsersWithListInput",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "description": "List of user object",
              "required": true
            },
            "method": "post",
            "path": "/user/createWithList",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": [
              {
                "id": 0,
                "username": "John78",
                "firstName": "John",
                "lastName": "Smith",
                "email": "john.smith@example.com",
                "password": "drowssaP123",
                "phone": "+1-202-555-0192",
                "userStatus": 0
              }
            ],
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Creates list of users with given input array",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "createWithList"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "[\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    },\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    }\n]"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/creates-list-of-users-with-given-input-array-1",
          "previous": {
            "title": "Creates list of users with given input array",
            "permalink": "/petstore/creates-list-of-users-with-given-input-array"
          },
          "next": {
            "title": "Logs user into the system",
            "permalink": "/petstore/logs-user-into-the-system"
          }
        },
        {
          "type": "api",
          "id": "logs-user-into-the-system",
          "unversionedId": "logs-user-into-the-system",
          "title": "Logs user into the system",
          "description": "",
          "slug": "/logs-user-into-the-system",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "loginUser",
            "parameters": [
              {
                "name": "username",
                "in": "query",
                "description": "The user name for login",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "password",
                "in": "query",
                "description": "The password for login in clear text",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "headers": {
                  "X-Rate-Limit": {
                    "description": "calls per hour allowed by the user",
                    "schema": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "X-Expires-After": {
                    "description": "date in UTC when token expires",
                    "schema": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "string"
                    },
                    "examples": {
                      "response": {
                        "value": "OK"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "string"
                    },
                    "examples": {
                      "response": {
                        "value": "<Message> OK </Message>"
                      }
                    }
                  },
                  "text/plain": {
                    "examples": {
                      "response": {
                        "value": "OK"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid username/password supplied"
              }
            },
            "method": "get",
            "path": "/user/login",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Logs user into the system",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) The user name for login",
                      "type": "text/plain"
                    },
                    "key": "username",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "(Required) The password for login in clear text",
                      "type": "text/plain"
                    },
                    "key": "password",
                    "value": "<string>"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/logs-user-into-the-system",
          "previous": {
            "title": "Creates list of users with given input array",
            "permalink": "/petstore/creates-list-of-users-with-given-input-array-1"
          },
          "next": {
            "title": "Logs out current logged in user session",
            "permalink": "/petstore/logs-out-current-logged-in-user-session"
          }
        },
        {
          "type": "api",
          "id": "logs-out-current-logged-in-user-session",
          "unversionedId": "logs-out-current-logged-in-user-session",
          "title": "Logs out current logged in user session",
          "description": "",
          "slug": "/logs-out-current-logged-in-user-session",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "logoutUser",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "method": "get",
            "path": "/user/logout",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Logs out current logged in user session",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "logout"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/petstore/logs-out-current-logged-in-user-session",
          "previous": {
            "title": "Logs user into the system",
            "permalink": "/petstore/logs-user-into-the-system"
          }
        }
      ]
    },
    "cos": {
      "loadedApi": [
        {
          "type": "api",
          "id": "generating-an-iam-token",
          "unversionedId": "generating-an-iam-token",
          "title": "Generating an IAM token",
          "description": "",
          "slug": "/generating-an-iam-token",
          "frontMatter": {},
          "api": {
            "tags": [
              "Authentication"
            ],
            "description": "Generate an IBM Cloud® Identity and Access Management (IAM) token by using either your [IAM API key](https://cloud.ibm.com/docs/iam?topic=iam-userapikey#userapikey) or a [service ID's API key](https://cloud.ibm.com/docs/iam?topic=iam-serviceidapikeys#serviceidapikeys) IBM Cloud APIs can be accessed only by users who are authorized by an assigned IAM role.\nEach user who is calling the API must pass credentials for the API to authenticate.\n\nYou can generate an IAM token by using either your IBM Cloud API key or a service ID's API key.\nThe API key is a permanent credential that can be reused if you don't lose the API key value or delete the API key in the account.\nThis process is also used if you are developing an application that needs to work with other IBM Cloud services.\nYou must use a service ID API key to get an access token to be passed to each of the IBM Cloud services.\n\n:::note\nAn access token is a temporary credential that expires after 1 hour.\nAfter the acquired token expires, you must generate a new token to continue calling IBM Cloud or service APIs, and you can perform only actions that are allowed by your level of assigned access within all accounts.\n:::",
            "requestBody": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "grant_type": {
                        "type": "string",
                        "enum": [
                          "urn:ibm:params:oauth:grant-type:apikey"
                        ]
                      },
                      "apikey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "grant_type",
                      "apikey"
                    ]
                  }
                }
              },
              "required": true
            },
            "security": [
              {
                "//": []
              }
            ],
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "post",
            "path": "/identity/token",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "Generating an IAM token",
              "description": {
                "content": "Generate an IBM Cloud® Identity and Access Management (IAM) token by using either your [IAM API key](https://cloud.ibm.com/docs/iam?topic=iam-userapikey#userapikey) or a [service ID's API key](https://cloud.ibm.com/docs/iam?topic=iam-serviceidapikeys#serviceidapikeys) IBM Cloud APIs can be accessed only by users who are authorized by an assigned IAM role.\nEach user who is calling the API must pass credentials for the API to authenticate.\n\nYou can generate an IAM token by using either your IBM Cloud API key or a service ID's API key.\nThe API key is a permanent credential that can be reused if you don't lose the API key value or delete the API key in the account.\nThis process is also used if you are developing an application that needs to work with other IBM Cloud services.\nYou must use a service ID API key to get an access token to be passed to each of the IBM Cloud services.\n\n:::note\nAn access token is a temporary credential that expires after 1 hour.\nAfter the acquired token expires, you must generate a new token to continue calling IBM Cloud or service APIs, and you can perform only actions that are allowed by your level of assigned access within all accounts.\n:::",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "identity",
                  "token"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "description": {
                      "content": " (This can only be one of urn:ibm:params:oauth:grant-type:apikey)",
                      "type": "text/plain"
                    },
                    "key": "grant_type",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "apikey",
                    "value": "<string>"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/cos/generating-an-iam-token",
          "next": {
            "title": "List buckets",
            "permalink": "/cos/list-buckets"
          }
        },
        {
          "type": "api",
          "id": "list-buckets",
          "unversionedId": "list-buckets",
          "title": "List buckets",
          "description": "",
          "slug": "/list-buckets",
          "frontMatter": {},
          "api": {
            "tags": [
              "Bucket operations"
            ],
            "description": "A `GET` request sent to the endpoint root returns a list of buckets that are associated with the specified service instance.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).",
            "parameters": [
              {
                "in": "query",
                "name": "extended",
                "description": "Provides `LocationConstraint` metadata in the listing.",
                "required": false,
                "schema": {
                  "type": "boolean"
                },
                "allowEmptyValue": true
              },
              {
                "name": "ibm-service-instance-id",
                "in": "header",
                "description": "List buckets that were created in this service instance.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "security": [
              {
                "BearerAuth": []
              },
              {
                "BearerAuth": [],
                "BasicAuth": []
              }
            ],
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "get",
            "path": "/",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "List buckets",
              "description": {
                "content": "A `GET` request sent to the endpoint root returns a list of buckets that are associated with the specified service instance.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "Provides `LocationConstraint` metadata in the listing.",
                      "type": "text/plain"
                    },
                    "key": "extended",
                    "value": "<boolean>"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "(Required) List buckets that were created in this service instance.",
                    "type": "text/plain"
                  },
                  "key": "ibm-service-instance-id",
                  "value": "<string>"
                }
              ],
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "any",
                    "value": "<Bearer Token>",
                    "key": "token"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/cos/list-buckets",
          "previous": {
            "title": "Generating an IAM token",
            "permalink": "/cos/generating-an-iam-token"
          },
          "next": {
            "title": "Create a bucket",
            "permalink": "/cos/create-a-bucket"
          }
        },
        {
          "type": "api",
          "id": "create-a-bucket",
          "unversionedId": "create-a-bucket",
          "title": "Create a bucket",
          "description": "",
          "slug": "/create-a-bucket",
          "frontMatter": {},
          "api": {
            "tags": [
              "Bucket operations"
            ],
            "description": "A `PUT` request sent to the endpoint root followed by a string will create a bucket.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nBucket names must be globally unique and DNS-compliant; names between 3 and 63 characters long must be made of lowercase letters, numbers, and dashes.\nBucket names must begin and end with a lowercase letter or number.\nBucket names resembling IP addresses are not allowed.\nThis operation doesn't make use of operation specific query parameters.\n\n:::info important\nBucket names must be unique because all buckets in the public cloud share a global namespace.\nThis allows for access to a bucket without needing to provide any service instance or account information.\nIt is also not possible to create a bucket with a name beginning with `cosv1-` or `account-` as these prefixes are reserved by the system.\n:::\n\n:::note\nPersonally Identifiable Information (PII): When creating buckets or adding objects, please ensure to not use any information that can identify any user (natural person) by name, location or any other means in the name of the bucket or object.\n:::\n\n## Create a bucket with a different storage class\n\nTo create a bucket with a different storage class, send an XML block specifying a bucket configuration with a `LocationConstraint` of `{provisioning code}` in the body of a `PUT` request to a bucket endpoint.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nNote that standard bucket [naming rules](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-compatibility-api-bucket-operations#compatibility-api-new-bucket) apply.\nThis operation does not make use of operation specific query parameters.\n\nThe body of the request must contain an XML block with the following schema:\n\n```xml\n<CreateBucketConfiguration>\n  <LocationConstraint>us-vault</LocationConstraint>\n</CreateBucketConfiguration>\n```\n\nA list of valid provisioning codes for `LocationConstraint` can be referenced in [the Storage Classes guide](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-classes#classes-locationconstraint).\n\n## Create a new bucket with Key Protect or Hyper Protect Crypto Services managed encryption keys (SSE-KP)\n\nTo create a bucket where the encryption keys are managed by Key Protect or Hyper Protect Crypto Services, it is necessary to have access to an active Key Protect or Hyper Protect Crypto Services service instance located in the same location as the new bucket.\nThis operation does not make use of operation specific query parameters.\n\nFor more information on using Key Protect to manage your encryption keys, [see the documentation for Key Protect](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial).\n\nFor more information on Hyper Protect Crypto Services, [see the documentation](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started).\n\n:::note\nNote that managed encryption is **not** available in a Cross Region configuration and any SSE-KP buckets must be Regional.\n:::",
            "parameters": [
              {
                "name": "bucketName",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "ibm-service-instance-id",
                "in": "header",
                "description": "This header references the service instance where the bucket will be created and to which data usage will be billed.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "ibm-sse-kp-encryption-algorithm",
                "in": "header",
                "description": "This header is used to specify the algorithm and key size to use with the encryption key stored by using Key Protect. This value must be set to the string `AES256`.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "ibm-sse-kp-customer-root-key-crn",
                "in": "header",
                "description": "This header is used to reference the specific root key used by Key Protect or Hyper Protect Crypto Services to encrypt this bucket. This value must be the full CRN of the root key.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "requestBody": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "CreateBucketConfiguration": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "put",
            "path": "/{bucketName}",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "security": [
              {
                "BearerAuth": []
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "Create a bucket",
              "description": {
                "content": "A `PUT` request sent to the endpoint root followed by a string will create a bucket.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nBucket names must be globally unique and DNS-compliant; names between 3 and 63 characters long must be made of lowercase letters, numbers, and dashes.\nBucket names must begin and end with a lowercase letter or number.\nBucket names resembling IP addresses are not allowed.\nThis operation doesn't make use of operation specific query parameters.\n\n:::info important\nBucket names must be unique because all buckets in the public cloud share a global namespace.\nThis allows for access to a bucket without needing to provide any service instance or account information.\nIt is also not possible to create a bucket with a name beginning with `cosv1-` or `account-` as these prefixes are reserved by the system.\n:::\n\n:::note\nPersonally Identifiable Information (PII): When creating buckets or adding objects, please ensure to not use any information that can identify any user (natural person) by name, location or any other means in the name of the bucket or object.\n:::\n\n## Create a bucket with a different storage class\n\nTo create a bucket with a different storage class, send an XML block specifying a bucket configuration with a `LocationConstraint` of `{provisioning code}` in the body of a `PUT` request to a bucket endpoint.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nNote that standard bucket [naming rules](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-compatibility-api-bucket-operations#compatibility-api-new-bucket) apply.\nThis operation does not make use of operation specific query parameters.\n\nThe body of the request must contain an XML block with the following schema:\n\n```xml\n<CreateBucketConfiguration>\n  <LocationConstraint>us-vault</LocationConstraint>\n</CreateBucketConfiguration>\n```\n\nA list of valid provisioning codes for `LocationConstraint` can be referenced in [the Storage Classes guide](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-classes#classes-locationconstraint).\n\n## Create a new bucket with Key Protect or Hyper Protect Crypto Services managed encryption keys (SSE-KP)\n\nTo create a bucket where the encryption keys are managed by Key Protect or Hyper Protect Crypto Services, it is necessary to have access to an active Key Protect or Hyper Protect Crypto Services service instance located in the same location as the new bucket.\nThis operation does not make use of operation specific query parameters.\n\nFor more information on using Key Protect to manage your encryption keys, [see the documentation for Key Protect](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial).\n\nFor more information on Hyper Protect Crypto Services, [see the documentation](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started).\n\n:::note\nNote that managed encryption is **not** available in a Cross Region configuration and any SSE-KP buckets must be Regional.\n:::",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ":bucketName"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "bucketName"
                  }
                ]
              },
              "header": [
                {
                  "description": {
                    "content": "(Required) This header references the service instance where the bucket will be created and to which data usage will be billed.",
                    "type": "text/plain"
                  },
                  "key": "ibm-service-instance-id",
                  "value": "<string>"
                },
                {
                  "description": {
                    "content": "This header is used to specify the algorithm and key size to use with the encryption key stored by using Key Protect. This value must be set to the string `AES256`.",
                    "type": "text/plain"
                  },
                  "key": "ibm-sse-kp-encryption-algorithm",
                  "value": "<string>"
                },
                {
                  "description": {
                    "content": "This header is used to reference the specific root key used by Key Protect or Hyper Protect Crypto Services to encrypt this bucket. This value must be the full CRN of the root key.",
                    "type": "text/plain"
                  },
                  "key": "ibm-sse-kp-customer-root-key-crn",
                  "value": "<string>"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"CreateBucketConfiguration\": \"<object>\"\n}"
              }
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/cos/create-a-bucket",
          "previous": {
            "title": "List buckets",
            "permalink": "/cos/list-buckets"
          },
          "next": {
            "title": "Retrieve a bucket's headers",
            "permalink": "/cos/retrieve-a-buckets-headers"
          }
        },
        {
          "type": "api",
          "id": "retrieve-a-buckets-headers",
          "unversionedId": "retrieve-a-buckets-headers",
          "title": "Retrieve a bucket's headers",
          "description": "",
          "slug": "/retrieve-a-buckets-headers",
          "frontMatter": {},
          "api": {
            "tags": [
              "Bucket operations"
            ],
            "description": "A `HEAD` issued to a bucket will return the headers for that bucket.",
            "parameters": [
              {
                "name": "bucketName",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "head",
            "path": "/{bucketName}",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "security": [
              {
                "BearerAuth": []
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "Retrieve a bucket's headers",
              "description": {
                "content": "A `HEAD` issued to a bucket will return the headers for that bucket.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ":bucketName"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "bucketName"
                  }
                ]
              },
              "method": "HEAD"
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/cos/retrieve-a-buckets-headers",
          "previous": {
            "title": "Create a bucket",
            "permalink": "/cos/create-a-bucket"
          }
        }
      ]
    },
    "multi-spec": {
      "loadedApi": [
        {
          "type": "api",
          "id": "generating-an-iam-token",
          "unversionedId": "generating-an-iam-token",
          "title": "Generating an IAM token",
          "description": "",
          "slug": "/generating-an-iam-token",
          "frontMatter": {},
          "api": {
            "tags": [
              "Authentication"
            ],
            "description": "Generate an IBM Cloud® Identity and Access Management (IAM) token by using either your [IAM API key](https://cloud.ibm.com/docs/iam?topic=iam-userapikey#userapikey) or a [service ID's API key](https://cloud.ibm.com/docs/iam?topic=iam-serviceidapikeys#serviceidapikeys) IBM Cloud APIs can be accessed only by users who are authorized by an assigned IAM role.\nEach user who is calling the API must pass credentials for the API to authenticate.\n\nYou can generate an IAM token by using either your IBM Cloud API key or a service ID's API key.\nThe API key is a permanent credential that can be reused if you don't lose the API key value or delete the API key in the account.\nThis process is also used if you are developing an application that needs to work with other IBM Cloud services.\nYou must use a service ID API key to get an access token to be passed to each of the IBM Cloud services.\n\n:::note\nAn access token is a temporary credential that expires after 1 hour.\nAfter the acquired token expires, you must generate a new token to continue calling IBM Cloud or service APIs, and you can perform only actions that are allowed by your level of assigned access within all accounts.\n:::",
            "requestBody": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "grant_type": {
                        "type": "string",
                        "enum": [
                          "urn:ibm:params:oauth:grant-type:apikey"
                        ]
                      },
                      "apikey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "grant_type",
                      "apikey"
                    ]
                  }
                }
              },
              "required": true
            },
            "security": [
              {
                "//": []
              }
            ],
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "post",
            "path": "/identity/token",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "Generating an IAM token",
              "description": {
                "content": "Generate an IBM Cloud® Identity and Access Management (IAM) token by using either your [IAM API key](https://cloud.ibm.com/docs/iam?topic=iam-userapikey#userapikey) or a [service ID's API key](https://cloud.ibm.com/docs/iam?topic=iam-serviceidapikeys#serviceidapikeys) IBM Cloud APIs can be accessed only by users who are authorized by an assigned IAM role.\nEach user who is calling the API must pass credentials for the API to authenticate.\n\nYou can generate an IAM token by using either your IBM Cloud API key or a service ID's API key.\nThe API key is a permanent credential that can be reused if you don't lose the API key value or delete the API key in the account.\nThis process is also used if you are developing an application that needs to work with other IBM Cloud services.\nYou must use a service ID API key to get an access token to be passed to each of the IBM Cloud services.\n\n:::note\nAn access token is a temporary credential that expires after 1 hour.\nAfter the acquired token expires, you must generate a new token to continue calling IBM Cloud or service APIs, and you can perform only actions that are allowed by your level of assigned access within all accounts.\n:::",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "identity",
                  "token"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "description": {
                      "content": " (This can only be one of urn:ibm:params:oauth:grant-type:apikey)",
                      "type": "text/plain"
                    },
                    "key": "grant_type",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "apikey",
                    "value": "<string>"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/generating-an-iam-token",
          "next": {
            "title": "List buckets",
            "permalink": "/multi-spec/list-buckets"
          }
        },
        {
          "type": "api",
          "id": "list-buckets",
          "unversionedId": "list-buckets",
          "title": "List buckets",
          "description": "",
          "slug": "/list-buckets",
          "frontMatter": {},
          "api": {
            "tags": [
              "Bucket operations"
            ],
            "description": "A `GET` request sent to the endpoint root returns a list of buckets that are associated with the specified service instance.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).",
            "parameters": [
              {
                "in": "query",
                "name": "extended",
                "description": "Provides `LocationConstraint` metadata in the listing.",
                "required": false,
                "schema": {
                  "type": "boolean"
                },
                "allowEmptyValue": true
              },
              {
                "name": "ibm-service-instance-id",
                "in": "header",
                "description": "List buckets that were created in this service instance.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "security": [
              {
                "BearerAuth": []
              },
              {
                "BearerAuth": [],
                "BasicAuth": []
              }
            ],
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "get",
            "path": "/",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "List buckets",
              "description": {
                "content": "A `GET` request sent to the endpoint root returns a list of buckets that are associated with the specified service instance.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "Provides `LocationConstraint` metadata in the listing.",
                      "type": "text/plain"
                    },
                    "key": "extended",
                    "value": "<boolean>"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "(Required) List buckets that were created in this service instance.",
                    "type": "text/plain"
                  },
                  "key": "ibm-service-instance-id",
                  "value": "<string>"
                }
              ],
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "any",
                    "value": "<Bearer Token>",
                    "key": "token"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/list-buckets",
          "previous": {
            "title": "Generating an IAM token",
            "permalink": "/multi-spec/generating-an-iam-token"
          },
          "next": {
            "title": "Create a bucket",
            "permalink": "/multi-spec/create-a-bucket"
          }
        },
        {
          "type": "api",
          "id": "create-a-bucket",
          "unversionedId": "create-a-bucket",
          "title": "Create a bucket",
          "description": "",
          "slug": "/create-a-bucket",
          "frontMatter": {},
          "api": {
            "tags": [
              "Bucket operations"
            ],
            "description": "A `PUT` request sent to the endpoint root followed by a string will create a bucket.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nBucket names must be globally unique and DNS-compliant; names between 3 and 63 characters long must be made of lowercase letters, numbers, and dashes.\nBucket names must begin and end with a lowercase letter or number.\nBucket names resembling IP addresses are not allowed.\nThis operation doesn't make use of operation specific query parameters.\n\n:::info important\nBucket names must be unique because all buckets in the public cloud share a global namespace.\nThis allows for access to a bucket without needing to provide any service instance or account information.\nIt is also not possible to create a bucket with a name beginning with `cosv1-` or `account-` as these prefixes are reserved by the system.\n:::\n\n:::note\nPersonally Identifiable Information (PII): When creating buckets or adding objects, please ensure to not use any information that can identify any user (natural person) by name, location or any other means in the name of the bucket or object.\n:::\n\n## Create a bucket with a different storage class\n\nTo create a bucket with a different storage class, send an XML block specifying a bucket configuration with a `LocationConstraint` of `{provisioning code}` in the body of a `PUT` request to a bucket endpoint.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nNote that standard bucket [naming rules](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-compatibility-api-bucket-operations#compatibility-api-new-bucket) apply.\nThis operation does not make use of operation specific query parameters.\n\nThe body of the request must contain an XML block with the following schema:\n\n```xml\n<CreateBucketConfiguration>\n  <LocationConstraint>us-vault</LocationConstraint>\n</CreateBucketConfiguration>\n```\n\nA list of valid provisioning codes for `LocationConstraint` can be referenced in [the Storage Classes guide](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-classes#classes-locationconstraint).\n\n## Create a new bucket with Key Protect or Hyper Protect Crypto Services managed encryption keys (SSE-KP)\n\nTo create a bucket where the encryption keys are managed by Key Protect or Hyper Protect Crypto Services, it is necessary to have access to an active Key Protect or Hyper Protect Crypto Services service instance located in the same location as the new bucket.\nThis operation does not make use of operation specific query parameters.\n\nFor more information on using Key Protect to manage your encryption keys, [see the documentation for Key Protect](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial).\n\nFor more information on Hyper Protect Crypto Services, [see the documentation](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started).\n\n:::note\nNote that managed encryption is **not** available in a Cross Region configuration and any SSE-KP buckets must be Regional.\n:::",
            "parameters": [
              {
                "name": "bucketName",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "ibm-service-instance-id",
                "in": "header",
                "description": "This header references the service instance where the bucket will be created and to which data usage will be billed.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "ibm-sse-kp-encryption-algorithm",
                "in": "header",
                "description": "This header is used to specify the algorithm and key size to use with the encryption key stored by using Key Protect. This value must be set to the string `AES256`.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "ibm-sse-kp-customer-root-key-crn",
                "in": "header",
                "description": "This header is used to reference the specific root key used by Key Protect or Hyper Protect Crypto Services to encrypt this bucket. This value must be the full CRN of the root key.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "requestBody": {
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "CreateBucketConfiguration": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "put",
            "path": "/{bucketName}",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "security": [
              {
                "BearerAuth": []
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "Create a bucket",
              "description": {
                "content": "A `PUT` request sent to the endpoint root followed by a string will create a bucket.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nBucket names must be globally unique and DNS-compliant; names between 3 and 63 characters long must be made of lowercase letters, numbers, and dashes.\nBucket names must begin and end with a lowercase letter or number.\nBucket names resembling IP addresses are not allowed.\nThis operation doesn't make use of operation specific query parameters.\n\n:::info important\nBucket names must be unique because all buckets in the public cloud share a global namespace.\nThis allows for access to a bucket without needing to provide any service instance or account information.\nIt is also not possible to create a bucket with a name beginning with `cosv1-` or `account-` as these prefixes are reserved by the system.\n:::\n\n:::note\nPersonally Identifiable Information (PII): When creating buckets or adding objects, please ensure to not use any information that can identify any user (natural person) by name, location or any other means in the name of the bucket or object.\n:::\n\n## Create a bucket with a different storage class\n\nTo create a bucket with a different storage class, send an XML block specifying a bucket configuration with a `LocationConstraint` of `{provisioning code}` in the body of a `PUT` request to a bucket endpoint.\nFor more information about endpoints, see [Endpoints and storage locations](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-endpoints#endpoints).\nNote that standard bucket [naming rules](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-compatibility-api-bucket-operations#compatibility-api-new-bucket) apply.\nThis operation does not make use of operation specific query parameters.\n\nThe body of the request must contain an XML block with the following schema:\n\n```xml\n<CreateBucketConfiguration>\n  <LocationConstraint>us-vault</LocationConstraint>\n</CreateBucketConfiguration>\n```\n\nA list of valid provisioning codes for `LocationConstraint` can be referenced in [the Storage Classes guide](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-classes#classes-locationconstraint).\n\n## Create a new bucket with Key Protect or Hyper Protect Crypto Services managed encryption keys (SSE-KP)\n\nTo create a bucket where the encryption keys are managed by Key Protect or Hyper Protect Crypto Services, it is necessary to have access to an active Key Protect or Hyper Protect Crypto Services service instance located in the same location as the new bucket.\nThis operation does not make use of operation specific query parameters.\n\nFor more information on using Key Protect to manage your encryption keys, [see the documentation for Key Protect](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial).\n\nFor more information on Hyper Protect Crypto Services, [see the documentation](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started).\n\n:::note\nNote that managed encryption is **not** available in a Cross Region configuration and any SSE-KP buckets must be Regional.\n:::",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ":bucketName"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "bucketName"
                  }
                ]
              },
              "header": [
                {
                  "description": {
                    "content": "(Required) This header references the service instance where the bucket will be created and to which data usage will be billed.",
                    "type": "text/plain"
                  },
                  "key": "ibm-service-instance-id",
                  "value": "<string>"
                },
                {
                  "description": {
                    "content": "This header is used to specify the algorithm and key size to use with the encryption key stored by using Key Protect. This value must be set to the string `AES256`.",
                    "type": "text/plain"
                  },
                  "key": "ibm-sse-kp-encryption-algorithm",
                  "value": "<string>"
                },
                {
                  "description": {
                    "content": "This header is used to reference the specific root key used by Key Protect or Hyper Protect Crypto Services to encrypt this bucket. This value must be the full CRN of the root key.",
                    "type": "text/plain"
                  },
                  "key": "ibm-sse-kp-customer-root-key-crn",
                  "value": "<string>"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"CreateBucketConfiguration\": \"<object>\"\n}"
              }
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/create-a-bucket",
          "previous": {
            "title": "List buckets",
            "permalink": "/multi-spec/list-buckets"
          },
          "next": {
            "title": "Retrieve a bucket's headers",
            "permalink": "/multi-spec/retrieve-a-buckets-headers"
          }
        },
        {
          "type": "api",
          "id": "retrieve-a-buckets-headers",
          "unversionedId": "retrieve-a-buckets-headers",
          "title": "Retrieve a bucket's headers",
          "description": "",
          "slug": "/retrieve-a-buckets-headers",
          "frontMatter": {},
          "api": {
            "tags": [
              "Bucket operations"
            ],
            "description": "A `HEAD` issued to a bucket will return the headers for that bucket.",
            "parameters": [
              {
                "name": "bucketName",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "ok"
              }
            },
            "method": "head",
            "path": "/{bucketName}",
            "servers": [
              {
                "url": "https://s3.{region}.cloud-object-storage.appdomain.cloud",
                "variables": {
                  "region": {
                    "enum": [
                      "us",
                      "eu",
                      "ap",
                      "us-south",
                      "us-east",
                      "eu-gb",
                      "eu-de",
                      "au-syd",
                      "jp-tok",
                      "ams03",
                      "che01",
                      "hkg02",
                      "mex01",
                      "mil01",
                      "mon01",
                      "osl01",
                      "par01",
                      "sjc04",
                      "sao01",
                      "seo01",
                      "sng01",
                      "tor01"
                    ],
                    "default": "us"
                  }
                }
              }
            ],
            "security": [
              {
                "BearerAuth": []
              }
            ],
            "securitySchemes": {
              "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
              },
              "BasicAuth": {
                "type": "http",
                "scheme": "basic"
              }
            },
            "info": {
              "title": "Cloud Object Storage",
              "version": "1.0.1"
            },
            "postman": {
              "name": "Retrieve a bucket's headers",
              "description": {
                "content": "A `HEAD` issued to a bucket will return the headers for that bucket.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  ":bucketName"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "bucketName"
                  }
                ]
              },
              "method": "HEAD"
            }
          },
          "source": "@site/examples/openapi-cos.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/retrieve-a-buckets-headers",
          "previous": {
            "title": "Create a bucket",
            "permalink": "/multi-spec/create-a-bucket"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary"
          }
        },
        {
          "type": "api",
          "id": "missing-summary",
          "unversionedId": "missing-summary",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary",
          "frontMatter": {},
          "api": {
            "responses": {
              "200": {
                "description": "OK"
              }
            },
            "description": "",
            "method": "get",
            "path": "/health",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/health",
              "description": {
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary",
          "previous": {
            "title": "Retrieve a bucket's headers",
            "permalink": "/multi-spec/retrieve-a-buckets-headers"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-1"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-1",
          "unversionedId": "missing-summary-1",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-1",
          "frontMatter": {},
          "api": {
            "description": "This method receives an authorization token. That token will be used to get the user's tokens.",
            "method": "post",
            "path": "/api/account/links/{partnerId}",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/api/account/links/:partnerId",
              "description": {
                "content": "This method receives an authorization token. That token will be used to get the user's tokens.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "account",
                  "links",
                  ":partnerId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-1",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-2"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-2",
          "unversionedId": "missing-summary-2",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-2",
          "frontMatter": {},
          "api": {
            "description": "",
            "method": "get",
            "path": "/account/pairs/{pairId}/linking-caps",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/account/pairs/:pairId/linking-caps",
              "description": {
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "account",
                  "pairs",
                  ":pairId",
                  "linking-caps"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-2",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-1"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-3"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-3",
          "unversionedId": "missing-summary-3",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-3",
          "frontMatter": {},
          "api": {
            "description": "This method will create a new AOI subscription",
            "method": "post",
            "path": "/api/aoi/subscriptions",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/api/aoi/subscriptions",
              "description": {
                "content": "This method will create a new AOI subscription",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "aoi",
                  "subscriptions"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-3",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-2"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-4"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-4",
          "unversionedId": "missing-summary-4",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-4",
          "frontMatter": {},
          "api": {
            "description": "This method will return the AOI subscription based on the user session and the linked account",
            "method": "get",
            "path": "/api/aoi/subscriptions/pair/{pairId}",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/api/aoi/subscriptions/pair/:pairId",
              "description": {
                "content": "This method will return the AOI subscription based on the user session and the linked account",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "aoi",
                  "subscriptions",
                  "pair",
                  ":pairId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-4",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-3"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-5"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-5",
          "unversionedId": "missing-summary-5",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-5",
          "frontMatter": {},
          "api": {
            "description": "This method will delete the current aoi subscription for a given pair",
            "method": "delete",
            "path": "/api/aoi/subscriptions/pair/{pairId}",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/api/aoi/subscriptions/pair/:pairId",
              "description": {
                "content": "This method will delete the current aoi subscription for a given pair",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "aoi",
                  "subscriptions",
                  "pair",
                  ":pairId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-5",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-4"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-6"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-6",
          "unversionedId": "missing-summary-6",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-6",
          "frontMatter": {},
          "api": {
            "description": "",
            "method": "get",
            "path": "/api/exchange/orders/{transactionId}",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/api/exchange/orders/:transactionId",
              "description": {
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "exchange",
                  "orders",
                  ":transactionId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-6",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-5"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-7"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-7",
          "unversionedId": "missing-summary-7",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-7",
          "frontMatter": {},
          "api": {
            "description": "",
            "method": "post",
            "path": "/api/feedback/contact-us",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/api/feedback/contact-us",
              "description": {
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "feedback",
                  "contact-us"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-7",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-6"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-8"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-8",
          "unversionedId": "missing-summary-8",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-8",
          "frontMatter": {},
          "api": {
            "description": "",
            "method": "delete",
            "path": "/maintenance/partners/{partnerId}/accounts/{accountId}/history",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/maintenance/partners/:partnerId/accounts/:accountId/history",
              "description": {
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "maintenance",
                  "partners",
                  ":partnerId",
                  "accounts",
                  ":accountId",
                  "history"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-8",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-7"
          },
          "next": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-9"
          }
        },
        {
          "type": "api",
          "id": "missing-summary-9",
          "unversionedId": "missing-summary-9",
          "title": "Missing summary",
          "description": "",
          "slug": "/missing-summary-9",
          "frontMatter": {},
          "api": {
            "description": "Proxy to PAUL's check if link exists",
            "method": "get",
            "path": "/partners/accounts/{accountId}/links/{partnerId}/exists",
            "info": {
              "title": "",
              "version": ""
            },
            "postman": {
              "name": "/partners/accounts/:accountId/links/:partnerId/exists",
              "description": {
                "content": "Proxy to PAUL's check if link exists",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "partners",
                  "accounts",
                  ":accountId",
                  "links",
                  ":partnerId",
                  "exists"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/openapi-issue-21.json",
          "sourceDirName": ".",
          "permalink": "/multi-spec/missing-summary-9",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-8"
          },
          "next": {
            "title": "Introduction",
            "permalink": "/multi-spec/introduction"
          }
        },
        {
          "type": "info",
          "id": "introduction",
          "unversionedId": "introduction",
          "title": "Introduction",
          "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
          "slug": "/introduction",
          "frontMatter": {},
          "info": {
            "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
            "version": "1.0.0",
            "title": "Swagger Petstore YAML",
            "termsOfService": "http://swagger.io/terms/",
            "contact": {
              "name": "API Support",
              "email": "apiteam@swagger.io",
              "url": "https://github.com/Redocly/redoc"
            },
            "x-logo": {
              "url": "https://redocly.github.io/redoc/petstore-logo.png",
              "altText": "Petstore logo"
            },
            "license": {
              "name": "Apache 2.0",
              "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/introduction",
          "previous": {
            "title": "Missing summary",
            "permalink": "/multi-spec/missing-summary-9"
          },
          "next": {
            "title": "Add a new pet to the store",
            "permalink": "/multi-spec/add-a-new-pet-to-the-store"
          }
        },
        {
          "type": "api",
          "id": "add-a-new-pet-to-the-store",
          "unversionedId": "add-a-new-pet-to-the-store",
          "title": "Add a new pet to the store",
          "description": "",
          "slug": "/add-a-new-pet-to-the-store",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Add new pet to the store inventory.",
            "operationId": "addPet",
            "responses": {
              "405": {
                "description": "Invalid input"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "x-codeSamples": [
              {
                "lang": "C#",
                "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();\npet.setApiKey(\"your api key\");\npet.petType = PetStore.v1.Pet.TYPE_DOG;\npet.name = \"Rex\";\n// set other fields\nPetStoreResponse response = pet.create();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Successfully created\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
              },
              {
                "lang": "PHP",
                "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->create($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "My Pet",
                    "title": "Pettie",
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "discriminator": {
                      "propertyName": "petType",
                      "mapping": {
                        "cat": "#/components/schemas/Cat",
                        "dog": "#/components/schemas/Dog",
                        "bee": "#/components/schemas/HoneyBee"
                      }
                    },
                    "properties": {
                      "id": {
                        "externalDocs": {
                          "description": "Find more info here",
                          "url": "https://example.com"
                        },
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "category": {
                        "description": "Categories this pet belongs to",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Category ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "description": "Category name",
                            "type": "string",
                            "minLength": 1
                          },
                          "sub": {
                            "description": "Test Sub Category",
                            "type": "object",
                            "properties": {
                              "prop1": {
                                "type": "string",
                                "description": "Dumb Property"
                              }
                            }
                          }
                        },
                        "xml": {
                          "name": "Category"
                        }
                      },
                      "name": {
                        "description": "The name given to a pet",
                        "type": "string",
                        "example": "Guru"
                      },
                      "photoUrls": {
                        "description": "The list of URL to a cute photos featuring pet",
                        "type": "array",
                        "maxItems": 20,
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string",
                          "format": "url"
                        }
                      },
                      "friend": {
                        "$ref": "#/components/schemas/Pet"
                      },
                      "tags": {
                        "description": "Tags attached to the pet",
                        "type": "array",
                        "minItems": 1,
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Tag ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Tag name",
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "Pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      },
                      "petType": {
                        "description": "Type of a pet",
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "hooray"
                      }
                    }
                  }
                }
              },
              "description": "Pet object that needs to be added to the store",
              "required": true
            },
            "method": "post",
            "path": "/pet",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string",
                "sub": {
                  "prop1": "string"
                }
              },
              "name": "Guru",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "available",
              "petType": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Add a new pet to the store",
              "description": {
                "content": "Add new pet to the store inventory.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                    "type": "text/plain"
                  },
                  "key": "Accept-Language",
                  "value": "en-AU"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n        \"<url>\",\n        \"<url>\"\n    ],\n    \"category\": {\n        \"name\": \"<string>\",\n        \"sub\": {\n            \"prop1\": \"<string>\"\n        }\n    },\n    \"friend\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"<string>\"\n        }\n    ],\n    \"status\": \"<string>\",\n    \"petType\": \"<string>\"\n}"
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/add-a-new-pet-to-the-store",
          "previous": {
            "title": "Introduction",
            "permalink": "/multi-spec/introduction"
          },
          "next": {
            "title": "Update an existing pet",
            "permalink": "/multi-spec/update-an-existing-pet"
          }
        },
        {
          "type": "api",
          "id": "update-an-existing-pet",
          "unversionedId": "update-an-existing-pet",
          "title": "Update an existing pet",
          "description": "",
          "slug": "/update-an-existing-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "updatePet",
            "responses": {
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              },
              "405": {
                "description": "Validation exception"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "x-codeSamples": [
              {
                "lang": "PHP",
                "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetId(1);\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->update($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "My Pet",
                    "title": "Pettie",
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "discriminator": {
                      "propertyName": "petType",
                      "mapping": {
                        "cat": "#/components/schemas/Cat",
                        "dog": "#/components/schemas/Dog",
                        "bee": "#/components/schemas/HoneyBee"
                      }
                    },
                    "properties": {
                      "id": {
                        "externalDocs": {
                          "description": "Find more info here",
                          "url": "https://example.com"
                        },
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "category": {
                        "description": "Categories this pet belongs to",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Category ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "description": "Category name",
                            "type": "string",
                            "minLength": 1
                          },
                          "sub": {
                            "description": "Test Sub Category",
                            "type": "object",
                            "properties": {
                              "prop1": {
                                "type": "string",
                                "description": "Dumb Property"
                              }
                            }
                          }
                        },
                        "xml": {
                          "name": "Category"
                        }
                      },
                      "name": {
                        "description": "The name given to a pet",
                        "type": "string",
                        "example": "Guru"
                      },
                      "photoUrls": {
                        "description": "The list of URL to a cute photos featuring pet",
                        "type": "array",
                        "maxItems": 20,
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string",
                          "format": "url"
                        }
                      },
                      "friend": {
                        "$ref": "#/components/schemas/Pet"
                      },
                      "tags": {
                        "description": "Tags attached to the pet",
                        "type": "array",
                        "minItems": 1,
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Tag ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Tag name",
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "Pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      },
                      "petType": {
                        "description": "Type of a pet",
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "hooray"
                      }
                    }
                  }
                }
              },
              "description": "Pet object that needs to be added to the store",
              "required": true
            },
            "method": "put",
            "path": "/pet",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string",
                "sub": {
                  "prop1": "string"
                }
              },
              "name": "Guru",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "available",
              "petType": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Update an existing pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                    "type": "text/plain"
                  },
                  "key": "Accept-Language",
                  "value": "en-AU"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n        \"<url>\",\n        \"<url>\"\n    ],\n    \"category\": {\n        \"name\": \"<string>\",\n        \"sub\": {\n            \"prop1\": \"<string>\"\n        }\n    },\n    \"friend\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"<string>\"\n        }\n    ],\n    \"status\": \"<string>\",\n    \"petType\": \"<string>\"\n}"
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/update-an-existing-pet",
          "previous": {
            "title": "Add a new pet to the store",
            "permalink": "/multi-spec/add-a-new-pet-to-the-store"
          },
          "next": {
            "title": "Find pet by ID",
            "permalink": "/multi-spec/find-pet-by-id"
          }
        },
        {
          "type": "api",
          "id": "find-pet-by-id",
          "unversionedId": "find-pet-by-id",
          "title": "Find pet by ID",
          "description": "",
          "slug": "/find-pet-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Returns a single pet",
            "operationId": "getPetById",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet to return",
                "required": true,
                "deprecated": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "discriminator": {
                        "propertyName": "petType",
                        "mapping": {
                          "cat": "#/components/schemas/Cat",
                          "dog": "#/components/schemas/Dog",
                          "bee": "#/components/schemas/HoneyBee"
                        }
                      },
                      "properties": {
                        "id": {
                          "externalDocs": {
                            "description": "Find more info here",
                            "url": "https://example.com"
                          },
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "category": {
                          "description": "Categories this pet belongs to",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Category ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Category name",
                              "type": "string",
                              "minLength": 1
                            },
                            "sub": {
                              "description": "Test Sub Category",
                              "type": "object",
                              "properties": {
                                "prop1": {
                                  "type": "string",
                                  "description": "Dumb Property"
                                }
                              }
                            }
                          },
                          "xml": {
                            "name": "Category"
                          }
                        },
                        "name": {
                          "description": "The name given to a pet",
                          "type": "string",
                          "example": "Guru"
                        },
                        "photoUrls": {
                          "description": "The list of URL to a cute photos featuring pet",
                          "type": "array",
                          "maxItems": 20,
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string",
                            "format": "url"
                          }
                        },
                        "friend": {
                          "$ref": "#/components/schemas/Pet"
                        },
                        "tags": {
                          "description": "Tags attached to the pet",
                          "type": "array",
                          "minItems": 1,
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "Pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        },
                        "petType": {
                          "description": "Type of a pet",
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "discriminator": {
                        "propertyName": "petType",
                        "mapping": {
                          "cat": "#/components/schemas/Cat",
                          "dog": "#/components/schemas/Dog",
                          "bee": "#/components/schemas/HoneyBee"
                        }
                      },
                      "properties": {
                        "id": {
                          "externalDocs": {
                            "description": "Find more info here",
                            "url": "https://example.com"
                          },
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "category": {
                          "description": "Categories this pet belongs to",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Category ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Category name",
                              "type": "string",
                              "minLength": 1
                            },
                            "sub": {
                              "description": "Test Sub Category",
                              "type": "object",
                              "properties": {
                                "prop1": {
                                  "type": "string",
                                  "description": "Dumb Property"
                                }
                              }
                            }
                          },
                          "xml": {
                            "name": "Category"
                          }
                        },
                        "name": {
                          "description": "The name given to a pet",
                          "type": "string",
                          "example": "Guru"
                        },
                        "photoUrls": {
                          "description": "The list of URL to a cute photos featuring pet",
                          "type": "array",
                          "maxItems": 20,
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string",
                            "format": "url"
                          }
                        },
                        "friend": {
                          "$ref": "#/components/schemas/Pet"
                        },
                        "tags": {
                          "description": "Tags attached to the pet",
                          "type": "array",
                          "minItems": 1,
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "Pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        },
                        "petType": {
                          "description": "Type of a pet",
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              }
            },
            "security": [
              {
                "api_key": []
              }
            ],
            "method": "get",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Find pet by ID",
              "description": {
                "content": "Returns a single pet",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet to return",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "method": "GET",
              "auth": {
                "type": "apikey",
                "apikey": [
                  {
                    "type": "any",
                    "value": "api_key",
                    "key": "key"
                  },
                  {
                    "type": "any",
                    "value": true,
                    "key": "value"
                  },
                  {
                    "type": "any",
                    "value": "header",
                    "key": "in"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/find-pet-by-id",
          "previous": {
            "title": "Update an existing pet",
            "permalink": "/multi-spec/update-an-existing-pet"
          },
          "next": {
            "title": "Updates a pet in the store with form data",
            "permalink": "/multi-spec/updates-a-pet-in-the-store-with-form-data"
          }
        },
        {
          "type": "api",
          "id": "updates-a-pet-in-the-store-with-form-data",
          "unversionedId": "updates-a-pet-in-the-store-with-form-data",
          "title": "Updates a pet in the store with form data",
          "description": "",
          "slug": "/updates-a-pet-in-the-store-with-form-data",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "updatePetWithForm",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet that needs to be updated",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "405": {
                "description": "Invalid input"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "requestBody": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Updated name of the pet",
                        "type": "string"
                      },
                      "status": {
                        "description": "Updated status of the pet",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "method": "post",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Updates a pet in the store with form data",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet that needs to be updated",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "description": {
                      "content": "Updated name of the pet",
                      "type": "text/plain"
                    },
                    "key": "name",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Updated status of the pet",
                      "type": "text/plain"
                    },
                    "key": "status",
                    "value": "<string>"
                  }
                ]
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/updates-a-pet-in-the-store-with-form-data",
          "previous": {
            "title": "Find pet by ID",
            "permalink": "/multi-spec/find-pet-by-id"
          },
          "next": {
            "title": "Deletes a pet",
            "permalink": "/multi-spec/deletes-a-pet"
          }
        },
        {
          "type": "api",
          "id": "deletes-a-pet",
          "unversionedId": "deletes-a-pet",
          "title": "Deletes a pet",
          "description": "",
          "slug": "/deletes-a-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "deletePet",
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "required": false,
                "schema": {
                  "type": "string"
                },
                "example": "Bearer <TOKEN>"
              },
              {
                "name": "petId",
                "in": "path",
                "description": "Pet id to delete",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid pet value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "delete",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Deletes a pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) Pet id to delete",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "api_key",
                  "value": "<string>"
                }
              ],
              "method": "DELETE",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/deletes-a-pet",
          "previous": {
            "title": "Updates a pet in the store with form data",
            "permalink": "/multi-spec/updates-a-pet-in-the-store-with-form-data"
          },
          "next": {
            "title": "uploads an image",
            "permalink": "/multi-spec/uploads-an-image"
          }
        },
        {
          "type": "api",
          "id": "uploads-an-image",
          "unversionedId": "uploads-an-image",
          "title": "uploads an image",
          "description": "",
          "slug": "/uploads-an-image",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "uploadFile",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet to update",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "requestBody": {
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "method": "post",
            "path": "/pet/{petId}/uploadImage",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "uploads an image",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId",
                  "uploadImage"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet to update",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/octet-stream"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\"<binary>\""
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/uploads-an-image",
          "previous": {
            "title": "Deletes a pet",
            "permalink": "/multi-spec/deletes-a-pet"
          },
          "next": {
            "title": "Finds Pets by status",
            "permalink": "/multi-spec/finds-pets-by-status"
          }
        },
        {
          "type": "api",
          "id": "finds-pets-by-status",
          "unversionedId": "finds-pets-by-status",
          "title": "Finds Pets by status",
          "description": "",
          "slug": "/finds-pets-by-status",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Multiple status values can be provided with comma separated strings",
            "operationId": "findPetsByStatus",
            "parameters": [
              {
                "name": "status",
                "in": "query",
                "description": "Status values that need to be considered for filter",
                "required": true,
                "style": "form",
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 3,
                  "items": {
                    "type": "string",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "default": "available"
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid status value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "get",
            "path": "/pet/findByStatus",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Finds Pets by status",
              "description": {
                "content": "Multiple status values can be provided with comma separated strings",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  "findByStatus"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) Status values that need to be considered for filter",
                      "type": "text/plain"
                    },
                    "key": "status",
                    "value": "available"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/finds-pets-by-status",
          "previous": {
            "title": "uploads an image",
            "permalink": "/multi-spec/uploads-an-image"
          },
          "next": {
            "title": "Finds Pets by tags",
            "permalink": "/multi-spec/finds-pets-by-tags"
          }
        },
        {
          "type": "api",
          "id": "finds-pets-by-tags",
          "unversionedId": "finds-pets-by-tags",
          "title": "Finds Pets by tags",
          "description": "",
          "slug": "/finds-pets-by-tags",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
            "operationId": "findPetsByTags",
            "deprecated": true,
            "parameters": [
              {
                "name": "tags",
                "in": "query",
                "description": "Tags to filter by",
                "required": true,
                "style": "form",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid tag value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "get",
            "path": "/pet/findByTags",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Finds Pets by tags",
              "description": {
                "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  "findByTags"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) Tags to filter by",
                      "type": "text/plain"
                    },
                    "key": "tags",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "(Required) Tags to filter by",
                      "type": "text/plain"
                    },
                    "key": "tags",
                    "value": "<string>"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/finds-pets-by-tags",
          "previous": {
            "title": "Finds Pets by status",
            "permalink": "/multi-spec/finds-pets-by-status"
          },
          "next": {
            "title": "Returns pet inventories by status",
            "permalink": "/multi-spec/returns-pet-inventories-by-status"
          }
        },
        {
          "type": "api",
          "id": "returns-pet-inventories-by-status",
          "unversionedId": "returns-pet-inventories-by-status",
          "title": "Returns pet inventories by status",
          "description": "",
          "slug": "/returns-pet-inventories-by-status",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "Returns a map of status codes to quantities",
            "operationId": "getInventory",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "security": [
              {
                "api_key": []
              }
            ],
            "method": "get",
            "path": "/store/inventory",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Returns pet inventories by status",
              "description": {
                "content": "Returns a map of status codes to quantities",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "inventory"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "apikey",
                "apikey": [
                  {
                    "type": "any",
                    "value": "api_key",
                    "key": "key"
                  },
                  {
                    "type": "any",
                    "value": true,
                    "key": "value"
                  },
                  {
                    "type": "any",
                    "value": "header",
                    "key": "in"
                  }
                ]
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/returns-pet-inventories-by-status",
          "previous": {
            "title": "Finds Pets by tags",
            "permalink": "/multi-spec/finds-pets-by-tags"
          },
          "next": {
            "title": "Place an order for a pet",
            "permalink": "/multi-spec/place-an-order-for-a-pet"
          }
        },
        {
          "type": "api",
          "id": "place-an-order-for-a-pet",
          "unversionedId": "place-an-order-for-a-pet",
          "title": "Place an order for a pet",
          "description": "",
          "slug": "/place-an-order-for-a-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "",
            "operationId": "placeOrder",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid Order",
                "content": {
                  "application/json": {
                    "example": {
                      "status": 400,
                      "message": "Invalid Order"
                    }
                  }
                }
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Order ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "petId": {
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "default": 1
                      },
                      "shipDate": {
                        "description": "Estimated ship date",
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "description": "Indicates whenever order was completed or not",
                        "type": "boolean",
                        "default": false,
                        "readOnly": true
                      },
                      "requestId": {
                        "description": "Unique Request Id",
                        "type": "string",
                        "writeOnly": true
                      }
                    },
                    "xml": {
                      "name": "Order"
                    }
                  }
                }
              },
              "description": "order placed for purchasing the pet",
              "required": true
            },
            "method": "post",
            "path": "/store/order",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "petId": 0,
              "quantity": 0,
              "shipDate": "string",
              "status": "placed",
              "complete": false,
              "requestId": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Place an order for a pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"quantity\": 1,\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"requestId\": \"<string>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/place-an-order-for-a-pet",
          "previous": {
            "title": "Returns pet inventories by status",
            "permalink": "/multi-spec/returns-pet-inventories-by-status"
          },
          "next": {
            "title": "Find purchase order by ID",
            "permalink": "/multi-spec/find-purchase-order-by-id"
          }
        },
        {
          "type": "api",
          "id": "find-purchase-order-by-id",
          "unversionedId": "find-purchase-order-by-id",
          "title": "Find purchase order by ID",
          "description": "",
          "slug": "/find-purchase-order-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
            "operationId": "getOrderById",
            "parameters": [
              {
                "name": "orderId",
                "in": "path",
                "description": "ID of pet that needs to be fetched",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "maximum": 5
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Order not found"
              }
            },
            "method": "get",
            "path": "/store/order/{orderId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Find purchase order by ID",
              "description": {
                "content": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order",
                  ":orderId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet that needs to be fetched",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "orderId"
                  }
                ]
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/find-purchase-order-by-id",
          "previous": {
            "title": "Place an order for a pet",
            "permalink": "/multi-spec/place-an-order-for-a-pet"
          },
          "next": {
            "title": "Delete purchase order by ID",
            "permalink": "/multi-spec/delete-purchase-order-by-id"
          }
        },
        {
          "type": "api",
          "id": "delete-purchase-order-by-id",
          "unversionedId": "delete-purchase-order-by-id",
          "title": "Delete purchase order by ID",
          "description": "",
          "slug": "/delete-purchase-order-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
            "operationId": "deleteOrder",
            "parameters": [
              {
                "name": "orderId",
                "in": "path",
                "description": "ID of the order that needs to be deleted",
                "required": true,
                "schema": {
                  "type": "string",
                  "minimum": 1
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Order not found"
              }
            },
            "method": "delete",
            "path": "/store/order/{orderId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Delete purchase order by ID",
              "description": {
                "content": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order",
                  ":orderId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of the order that needs to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "orderId"
                  }
                ]
              },
              "method": "DELETE"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/delete-purchase-order-by-id",
          "previous": {
            "title": "Find purchase order by ID",
            "permalink": "/multi-spec/find-purchase-order-by-id"
          },
          "next": {
            "title": "Subscribe to the Store events",
            "permalink": "/multi-spec/subscribe-to-the-store-events"
          }
        },
        {
          "type": "api",
          "id": "subscribe-to-the-store-events",
          "unversionedId": "subscribe-to-the-store-events",
          "title": "Subscribe to the Store events",
          "description": "",
          "slug": "/subscribe-to-the-store-events",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "Add subscription for a store events",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "callbackUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "This URL will be called by the server when the desired event will occur",
                        "example": "https://myserver.com/send/callback/here"
                      },
                      "eventName": {
                        "type": "string",
                        "description": "Event name for the subscription",
                        "enum": [
                          "orderInProgress",
                          "orderShipped",
                          "orderDelivered"
                        ],
                        "example": "orderInProgress"
                      }
                    },
                    "required": [
                      "callbackUrl",
                      "eventName"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Subscription added",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "subscriptionId": {
                          "type": "string",
                          "example": "AAA-123-BBB-456"
                        }
                      }
                    }
                  }
                }
              }
            },
            "callbacks": {
              "orderInProgress": {
                "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
                  "servers": [
                    {
                      "url": "//callback-url.path-level/v1",
                      "description": "Path level server 1"
                    },
                    {
                      "url": "//callback-url.path-level/v2",
                      "description": "Path level server 2"
                    }
                  ],
                  "post": {
                    "summary": "Order in Progress (Summary)",
                    "description": "A callback triggered every time an Order is updated status to \"inProgress\" (Description)",
                    "externalDocs": {
                      "description": "Find out more",
                      "url": "https://more-details.com/demo"
                    },
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "status": {
                                "type": "string",
                                "example": "inProgress"
                              }
                            }
                          }
                        },
                        "application/xml": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              }
                            }
                          },
                          "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <orderId>123</orderId>\n  <status>inProgress</status>\n  <timestamp>2018-10-19T16:46:45Z</timestamp>\n</root>\n"
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed",
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "someProp": {
                                  "type": "string",
                                  "example": "123"
                                }
                              }
                            }
                          }
                        }
                      },
                      "299": {
                        "description": "Response for cancelling subscription"
                      },
                      "500": {
                        "description": "Callback processing failed and retries will be performed"
                      }
                    },
                    "x-codeSamples": [
                      {
                        "lang": "C#",
                        "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();\npet.setApiKey(\"your api key\");\npet.petType = PetStore.v1.Pet.TYPE_DOG;\npet.name = \"Rex\";\n// set other fields\nPetStoreResponse response = pet.create();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Successfully created\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
                      },
                      {
                        "lang": "PHP",
                        "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->create($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
                      }
                    ]
                  },
                  "put": {
                    "description": "Order in Progress (Only Description)",
                    "servers": [
                      {
                        "url": "//callback-url.operation-level/v1",
                        "description": "Operation level server 1 (Operation override)"
                      },
                      {
                        "url": "//callback-url.operation-level/v2",
                        "description": "Operation level server 2 (Operation override)"
                      }
                    ],
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "status": {
                                "type": "string",
                                "example": "inProgress"
                              }
                            }
                          }
                        },
                        "application/xml": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              }
                            }
                          },
                          "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <orderId>123</orderId>\n  <status>inProgress</status>\n  <timestamp>2018-10-19T16:46:45Z</timestamp>\n</root>\n"
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed",
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "someProp": {
                                  "type": "string",
                                  "example": "123"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "orderShipped": {
                "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
                  "post": {
                    "description": "Very long description\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\nincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\nnostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\nfugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt mollit anim id est laborum.\n",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "estimatedDeliveryDate": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-11-11T16:00:00Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed"
                      }
                    }
                  }
                }
              },
              "orderDelivered": {
                "http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}": {
                  "post": {
                    "deprecated": true,
                    "summary": "Order delivered",
                    "description": "A callback triggered every time an Order is delivered to the recipient",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed"
                      }
                    }
                  }
                }
              }
            },
            "method": "post",
            "path": "/store/subscribe",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "callbackUrl": "https://myserver.com/send/callback/here",
              "eventName": "orderInProgress"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Subscribe to the Store events",
              "description": {
                "content": "Add subscription for a store events",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "subscribe"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"callbackUrl\": \"<uri>\",\n    \"eventName\": \"<string>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/subscribe-to-the-store-events",
          "previous": {
            "title": "Delete purchase order by ID",
            "permalink": "/multi-spec/delete-purchase-order-by-id"
          },
          "next": {
            "title": "Create user",
            "permalink": "/multi-spec/create-user"
          }
        },
        {
          "type": "api",
          "id": "create-user",
          "unversionedId": "create-user",
          "title": "Create user",
          "description": "",
          "slug": "/create-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "createUser",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "pet": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "photoUrls"
                            ],
                            "discriminator": {
                              "propertyName": "petType",
                              "mapping": {
                                "cat": "#/components/schemas/Cat",
                                "dog": "#/components/schemas/Dog",
                                "bee": "#/components/schemas/HoneyBee"
                              }
                            },
                            "properties": {
                              "id": {
                                "externalDocs": {
                                  "description": "Find more info here",
                                  "url": "https://example.com"
                                },
                                "description": "Pet ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "category": {
                                "description": "Categories this pet belongs to",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Category ID",
                                    "type": "integer",
                                    "format": "int64",
                                    "readOnly": true
                                  },
                                  "name": {
                                    "description": "Category name",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "sub": {
                                    "description": "Test Sub Category",
                                    "type": "object",
                                    "properties": {
                                      "prop1": {
                                        "type": "string",
                                        "description": "Dumb Property"
                                      }
                                    }
                                  }
                                },
                                "xml": {
                                  "name": "Category"
                                }
                              },
                              "name": {
                                "description": "The name given to a pet",
                                "type": "string",
                                "example": "Guru"
                              },
                              "photoUrls": {
                                "description": "The list of URL to a cute photos featuring pet",
                                "type": "array",
                                "maxItems": 20,
                                "xml": {
                                  "name": "photoUrl",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "string",
                                  "format": "url"
                                }
                              },
                              "friend": {
                                "$ref": "#/components/schemas/Pet"
                              },
                              "tags": {
                                "description": "Tags attached to the pet",
                                "type": "array",
                                "minItems": 1,
                                "xml": {
                                  "name": "tag",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Tag ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Tag name",
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "xml": {
                                    "name": "Tag"
                                  }
                                }
                              },
                              "status": {
                                "type": "string",
                                "description": "Pet status in the store",
                                "enum": [
                                  "available",
                                  "pending",
                                  "sold"
                                ]
                              },
                              "petType": {
                                "description": "Type of a pet",
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Pet"
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        ]
                      },
                      "username": {
                        "description": "User supplied username",
                        "type": "string",
                        "minLength": 4,
                        "example": "John78"
                      },
                      "firstName": {
                        "description": "User first name",
                        "type": "string",
                        "minLength": 1,
                        "example": "John"
                      },
                      "lastName": {
                        "description": "User last name",
                        "type": "string",
                        "minLength": 1,
                        "example": "Smith"
                      },
                      "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "john.smith@example.com"
                      },
                      "password": {
                        "type": "string",
                        "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                        "example": "drowssaP123"
                      },
                      "phone": {
                        "description": "User phone number in international format",
                        "type": "string",
                        "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                        "example": "+1-202-555-0192"
                      },
                      "userStatus": {
                        "description": "User status",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "xml": {
                      "name": "User"
                    }
                  }
                }
              },
              "description": "Created user object",
              "required": true
            },
            "method": "post",
            "path": "/user",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "username": "John78",
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@example.com",
              "password": "drowssaP123",
              "phone": "+1-202-555-0192",
              "userStatus": 0
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Create user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"pet\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<email>\",\n    \"password\": \"<password>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/create-user",
          "previous": {
            "title": "Subscribe to the Store events",
            "permalink": "/multi-spec/subscribe-to-the-store-events"
          },
          "next": {
            "title": "Get user by user name",
            "permalink": "/multi-spec/get-user-by-user-name"
          }
        },
        {
          "type": "api",
          "id": "get-user-by-user-name",
          "unversionedId": "get-user-by-user-name",
          "title": "Get user by user name",
          "description": "",
          "slug": "/get-user-by-user-name",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "getUserByName",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "The name that needs to be fetched. Use user1 for testing. ",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid username supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "method": "get",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Get user by user name",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/get-user-by-user-name",
          "previous": {
            "title": "Create user",
            "permalink": "/multi-spec/create-user"
          },
          "next": {
            "title": "Updated user",
            "permalink": "/multi-spec/updated-user"
          }
        },
        {
          "type": "api",
          "id": "updated-user",
          "unversionedId": "updated-user",
          "title": "Updated user",
          "description": "",
          "slug": "/updated-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "updateUser",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "name that need to be deleted",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid user supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "pet": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "photoUrls"
                            ],
                            "discriminator": {
                              "propertyName": "petType",
                              "mapping": {
                                "cat": "#/components/schemas/Cat",
                                "dog": "#/components/schemas/Dog",
                                "bee": "#/components/schemas/HoneyBee"
                              }
                            },
                            "properties": {
                              "id": {
                                "externalDocs": {
                                  "description": "Find more info here",
                                  "url": "https://example.com"
                                },
                                "description": "Pet ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "category": {
                                "description": "Categories this pet belongs to",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Category ID",
                                    "type": "integer",
                                    "format": "int64",
                                    "readOnly": true
                                  },
                                  "name": {
                                    "description": "Category name",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "sub": {
                                    "description": "Test Sub Category",
                                    "type": "object",
                                    "properties": {
                                      "prop1": {
                                        "type": "string",
                                        "description": "Dumb Property"
                                      }
                                    }
                                  }
                                },
                                "xml": {
                                  "name": "Category"
                                }
                              },
                              "name": {
                                "description": "The name given to a pet",
                                "type": "string",
                                "example": "Guru"
                              },
                              "photoUrls": {
                                "description": "The list of URL to a cute photos featuring pet",
                                "type": "array",
                                "maxItems": 20,
                                "xml": {
                                  "name": "photoUrl",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "string",
                                  "format": "url"
                                }
                              },
                              "friend": {
                                "$ref": "#/components/schemas/Pet"
                              },
                              "tags": {
                                "description": "Tags attached to the pet",
                                "type": "array",
                                "minItems": 1,
                                "xml": {
                                  "name": "tag",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Tag ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Tag name",
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "xml": {
                                    "name": "Tag"
                                  }
                                }
                              },
                              "status": {
                                "type": "string",
                                "description": "Pet status in the store",
                                "enum": [
                                  "available",
                                  "pending",
                                  "sold"
                                ]
                              },
                              "petType": {
                                "description": "Type of a pet",
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Pet"
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        ]
                      },
                      "username": {
                        "description": "User supplied username",
                        "type": "string",
                        "minLength": 4,
                        "example": "John78"
                      },
                      "firstName": {
                        "description": "User first name",
                        "type": "string",
                        "minLength": 1,
                        "example": "John"
                      },
                      "lastName": {
                        "description": "User last name",
                        "type": "string",
                        "minLength": 1,
                        "example": "Smith"
                      },
                      "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "john.smith@example.com"
                      },
                      "password": {
                        "type": "string",
                        "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                        "example": "drowssaP123"
                      },
                      "phone": {
                        "description": "User phone number in international format",
                        "type": "string",
                        "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                        "example": "+1-202-555-0192"
                      },
                      "userStatus": {
                        "description": "User status",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "xml": {
                      "name": "User"
                    }
                  }
                }
              },
              "description": "Updated user object",
              "required": true
            },
            "method": "put",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "username": "John78",
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@example.com",
              "password": "drowssaP123",
              "phone": "+1-202-555-0192",
              "userStatus": 0
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Updated user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) name that need to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"pet\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<email>\",\n    \"password\": \"<password>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/updated-user",
          "previous": {
            "title": "Get user by user name",
            "permalink": "/multi-spec/get-user-by-user-name"
          },
          "next": {
            "title": "Delete user",
            "permalink": "/multi-spec/delete-user"
          }
        },
        {
          "type": "api",
          "id": "delete-user",
          "unversionedId": "delete-user",
          "title": "Delete user",
          "description": "",
          "slug": "/delete-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "deleteUser",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "The name that needs to be deleted",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid username supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "method": "delete",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Delete user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) The name that needs to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "method": "DELETE"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/delete-user",
          "previous": {
            "title": "Updated user",
            "permalink": "/multi-spec/updated-user"
          },
          "next": {
            "title": "Creates list of users with given input array",
            "permalink": "/multi-spec/creates-list-of-users-with-given-input-array"
          }
        },
        {
          "type": "api",
          "id": "creates-list-of-users-with-given-input-array",
          "unversionedId": "creates-list-of-users-with-given-input-array",
          "title": "Creates list of users with given input array",
          "description": "",
          "slug": "/creates-list-of-users-with-given-input-array",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "createUsersWithArrayInput",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "description": "List of user object",
              "required": true
            },
            "method": "post",
            "path": "/user/createWithArray",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": [
              {
                "id": 0,
                "username": "John78",
                "firstName": "John",
                "lastName": "Smith",
                "email": "john.smith@example.com",
                "password": "drowssaP123",
                "phone": "+1-202-555-0192",
                "userStatus": 0
              }
            ],
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Creates list of users with given input array",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "createWithArray"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "[\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    },\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    }\n]"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/creates-list-of-users-with-given-input-array",
          "previous": {
            "title": "Delete user",
            "permalink": "/multi-spec/delete-user"
          },
          "next": {
            "title": "Creates list of users with given input array",
            "permalink": "/multi-spec/creates-list-of-users-with-given-input-array-1"
          }
        },
        {
          "type": "api",
          "id": "creates-list-of-users-with-given-input-array-1",
          "unversionedId": "creates-list-of-users-with-given-input-array-1",
          "title": "Creates list of users with given input array",
          "description": "",
          "slug": "/creates-list-of-users-with-given-input-array-1",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "createUsersWithListInput",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "description": "List of user object",
              "required": true
            },
            "method": "post",
            "path": "/user/createWithList",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": [
              {
                "id": 0,
                "username": "John78",
                "firstName": "John",
                "lastName": "Smith",
                "email": "john.smith@example.com",
                "password": "drowssaP123",
                "phone": "+1-202-555-0192",
                "userStatus": 0
              }
            ],
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Creates list of users with given input array",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "createWithList"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "[\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    },\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    }\n]"
              }
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/creates-list-of-users-with-given-input-array-1",
          "previous": {
            "title": "Creates list of users with given input array",
            "permalink": "/multi-spec/creates-list-of-users-with-given-input-array"
          },
          "next": {
            "title": "Logs user into the system",
            "permalink": "/multi-spec/logs-user-into-the-system"
          }
        },
        {
          "type": "api",
          "id": "logs-user-into-the-system",
          "unversionedId": "logs-user-into-the-system",
          "title": "Logs user into the system",
          "description": "",
          "slug": "/logs-user-into-the-system",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "loginUser",
            "parameters": [
              {
                "name": "username",
                "in": "query",
                "description": "The user name for login",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "password",
                "in": "query",
                "description": "The password for login in clear text",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "headers": {
                  "X-Rate-Limit": {
                    "description": "calls per hour allowed by the user",
                    "schema": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "X-Expires-After": {
                    "description": "date in UTC when token expires",
                    "schema": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "string"
                    },
                    "examples": {
                      "response": {
                        "value": "OK"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "string"
                    },
                    "examples": {
                      "response": {
                        "value": "<Message> OK </Message>"
                      }
                    }
                  },
                  "text/plain": {
                    "examples": {
                      "response": {
                        "value": "OK"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid username/password supplied"
              }
            },
            "method": "get",
            "path": "/user/login",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Logs user into the system",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) The user name for login",
                      "type": "text/plain"
                    },
                    "key": "username",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "(Required) The password for login in clear text",
                      "type": "text/plain"
                    },
                    "key": "password",
                    "value": "<string>"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/logs-user-into-the-system",
          "previous": {
            "title": "Creates list of users with given input array",
            "permalink": "/multi-spec/creates-list-of-users-with-given-input-array-1"
          },
          "next": {
            "title": "Logs out current logged in user session",
            "permalink": "/multi-spec/logs-out-current-logged-in-user-session"
          }
        },
        {
          "type": "api",
          "id": "logs-out-current-logged-in-user-session",
          "unversionedId": "logs-out-current-logged-in-user-session",
          "title": "Logs out current logged in user session",
          "description": "",
          "slug": "/logs-out-current-logged-in-user-session",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "logoutUser",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "method": "get",
            "path": "/user/logout",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Logs out current logged in user session",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "logout"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/petstore.yaml",
          "sourceDirName": ".",
          "permalink": "/multi-spec/logs-out-current-logged-in-user-session",
          "previous": {
            "title": "Logs user into the system",
            "permalink": "/multi-spec/logs-user-into-the-system"
          },
          "next": {
            "title": "Introduction",
            "permalink": "/multi-spec/introduction-1"
          }
        },
        {
          "type": "info",
          "id": "introduction-1",
          "unversionedId": "introduction-1",
          "title": "Introduction",
          "description": "Sample description.",
          "slug": "/introduction-1",
          "frontMatter": {},
          "info": {
            "title": "Frozen Yogurt Example",
            "version": "1.0.0",
            "description": "Sample description."
          },
          "source": "@site/examples/food/yogurtstore/openapi.yaml",
          "sourceDirName": "food/yogurtstore",
          "permalink": "/multi-spec/introduction-1",
          "previous": {
            "title": "Logs out current logged in user session",
            "permalink": "/multi-spec/logs-out-current-logged-in-user-session"
          },
          "next": {
            "title": "List All Flavors",
            "permalink": "/multi-spec/list-all-flavors"
          }
        },
        {
          "type": "api",
          "id": "list-all-flavors",
          "unversionedId": "list-all-flavors",
          "title": "List All Flavors",
          "description": "",
          "slug": "/list-all-flavors",
          "frontMatter": {},
          "api": {
            "description": "Froyo's the best!",
            "responses": {
              "200": {
                "description": "OK"
              }
            },
            "method": "get",
            "path": "/flavors",
            "info": {
              "title": "Frozen Yogurt Example",
              "version": "1.0.0",
              "description": "Sample description."
            },
            "postman": {
              "name": "List All Flavors",
              "description": {
                "content": "Froyo's the best!",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "flavors"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/examples/food/yogurtstore/openapi.yaml",
          "sourceDirName": "food/yogurtstore",
          "permalink": "/multi-spec/list-all-flavors",
          "previous": {
            "title": "Introduction",
            "permalink": "/multi-spec/introduction-1"
          }
        }
      ]
    }
  },
  "docusaurus-plugin-proxy": {},
  "docusaurus-theme-classic": {},
  "docusaurus-theme-openapi": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}